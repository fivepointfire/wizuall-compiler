Directory Tree:
wizuall-compiler/
│   ├── data.json
│   ├── data2.csv
│   ├── full_code.txt
│   ├── lexer_test
│   ├── Makefile
│   ├── notes.md
│   ├── README.md
│   ├── wizuall_compiler
│   ├── wizuall_parser.tab.c
│   ├── wizuall_parser.tab.h
│   ├── .git/ [EXCLUDED]
│   ├── build/ [EXCLUDED]
│   ├── codegen/
│   │   ├── emit_utils.c
│   │   ├── python_emitter.c
│   ├── core/
│   │   ├── config.h
│   │   ├── main.c
│   │   ├── main.o
│   ├── examples/
│   │   ├── impt.wzl
│   │   ├── tc1.wzl
│   │   ├── tc2.wzl
│   │   ├── tc3.wzl
│   │   ├── tc4.wzl
│   │   ├── tc5.wzl
│   │   ├── tc6.wzl
│   │   ├── test.wzl
│   ├── grammar/
│   │   ├── ast_builder.c
│   │   ├── wizuall_parser.c
│   │   ├── wizuall_parser.h
│   │   ├── wizuall_parser.y
│   ├── ir/
│   │   ├── ast.c
│   │   ├── ast.h
│   │   ├── ast_builder.c
│   │   ├── ast_builder.o
│   │   ├── codegen.c
│   │   ├── codegen.h
│   │   ├── codegen.o
│   │   ├── lexer.l
│   │   ├── parser.y
│   │   ├── semantic_checks.c
│   │   ├── symbol_table.c
│   ├── lexer/
│   │   ├── lex.yy.c
│   │   ├── wizuall_lexer.l
│   ├── plots/
│   │   ├── plot_1745800170_1.png
│   │   ├── plot_1745800170_2.png
│   │   ├── plot_1745800170_3.png
│   │   ├── plot_1745800185_1.png
│   │   ├── plot_1745800185_2.png
│   │   ├── plot_1745800258_1.png
│   ├── ReportChunks/
│   │   ├── lex_parse.md
│   │   ├── SyntaxDoc.md




# ======================
# File: data.json
# ======================

{
    "x" : [1, 2, 3, 4, 5],
    "y" : [5,4,3,2,1]
}

# ======================
# File: notes.md
# ======================

Certainly! Here is a highly detailed, structured report outline and content for your WizuAll compiler project, covering all the requested sections. You can copy this into a document editor and further format it as needed.

---

# Page 1: Title

**WizuAll Compiler Project**  
**A Domain-Specific Language for Data Analysis and Visualization**  
**Comprehensive Design, Implementation, and Refinement Report**  
*Prepared by: [Your Name/Team]*  
*Date: [Insert Date]*

---

# Page 2: Index

1. Title  
2. Index  
3. Introduction  
4. Design  
   - 4.1 Grammar  
   - 4.2 Preprocessor  
   - 4.3 Semantics  
   - 4.4 Scanner  
5. Parser  
6. Syntax-Directed Translation (SDT)  
7. Target Code Generation (Python Integration for Plotting)  
8. Refinement (Error Handling)  
9. References

---

# Page 3: Introduction

The WizuAll project is a custom compiler for a domain-specific language (DSL) designed to simplify data analysis and visualization. The language allows users to write concise, readable scripts for data manipulation, mathematical computation, and the generation of a wide variety of plots (line, bar, scatter, pie, box, heatmap, etc.) using Python’s matplotlib.  
This report details the design, implementation, and refinement of the WizuAll compiler, including its grammar, preprocessor, semantic analysis, scanner, parser, syntax-directed translation, target code generation, and error handling strategies.

---

# Pages 4-6: Design

## 4.1 Grammar

The grammar of WizuAll is defined using Bison/Yacc. It supports:
- Variable assignments
- Vector and matrix literals
- Mathematical and logical expressions
- Function calls (e.g., `avg`, `sort`, `reverse`, `slice`, `transpose`, `runningSum`, `pairwiseCompare`, `paretoSet`)
- Control structures (`if-else`, `while`, `for`)
- Visualization calls (e.g., `plot`, `histogram`, `heatmap`, `barchart`, `piechart`, `scatter`, `boxplot`, `timeline`)
- Keyword arguments for visualizations

**Example Grammar Snippet:**
```yacc
Program
    : StatementList                { final_ast = createProgramNode($1); }
    ;

Statement
    : Assignment SEMICOLON
    | ControlStructure
    | VisualizationCall SEMICOLON
    | FunctionCall SEMICOLON
    ;
```

## 4.2 Preprocessor

The preprocessor is minimal, as WizuAll is designed to be a scripting language. Comments (`// ...`) are stripped by the lexer. The preprocessor could be extended for macros or includes in future versions.

## 4.3 Semantics

Semantic actions are embedded in the grammar rules. They build an Abstract Syntax Tree (AST) using C structs. Each node type (assignment, function call, visualization, etc.) is represented by a specific struct.  
Semantic checks include:
- Type checking for expressions
- Ensuring correct number and type of arguments for functions and visualizations
- Handling of keyword arguments

## 4.4 Scanner

The scanner (lexer) is implemented using Flex. It recognizes:
- Identifiers
- Numbers (integers and floating point, e.g., `4.1`, `100.2`)
- Strings
- Operators and delimiters
- Keywords

**Key improvements:**
- The NUMBER regex was refined to support only valid floating point and integer numbers.
- The `%union` in the parser was updated to use `double` for floating point support.

---

# Pages 7-8: Parser

The parser is built with Bison/Yacc and uses the grammar described above.  
**Key features:**
- Builds the AST for the entire program.
- Handles operator precedence and associativity.
- Supports both positional and keyword arguments for visualizations.
- Allows expressions as values for keyword arguments (e.g., `labels=labels`).

**Error Handling in Parser:**
- Custom error messages with line and column numbers.
- Graceful recovery from common syntax errors.

**Example:**
```yacc
VizArg
    : ID ASSIGN STRING
        { ... }
    | ID ASSIGN Expression
        { ... }
    | Expression
        { ... }
    ;
```

---

# Pages 9-10: Syntax-Directed Translation (SDT)

SDT is used to translate the AST into Python code.  
**Key points:**
- Each AST node has a corresponding code generation function.
- Visualization nodes generate Python matplotlib code.
- Function calls and expressions are translated to Python equivalents.
- Control structures are mapped to Python `if`, `while`, and `for` statements.

**Example:**
- `boxplot([x, y, z]);` in WizuAll becomes:
  ```python
  plt.boxplot([x, y, z], notch=False, vert=True, patch_artist=True, tick_labels=['Data 1', 'Data 2', 'Data 3'])
  ```

---

# Pages 10-11: Target Code Generation (Python Integration for Plotting)

The code generator outputs Python code that:
- Imports necessary libraries (`matplotlib`, `numpy` as needed).
- Suppresses matplotlib warnings at the very top of the file.
- Handles all visualizations, ensuring correct argument mapping and default values.
- Dynamically generates tick labels for boxplots to match the number of datasets.
- Handles floating point numbers with full precision.
- Supports both interactive and non-interactive environments.

**Special Handling:**
- For `plt.show()` warnings, the generator inserts:
  ```python
  import warnings
  warnings.filterwarnings("ignore", category=UserWarning, module="matplotlib")
  ```
  at the very top of the file.

---

# Remaining Pages: Refinement (Error Handling)

## Error Handling and Refinement

### 1. **Lexer/Parser Errors**
- Custom error messages with line and column numbers.
- Clear feedback for invalid tokens, unexpected input, and mismatched parentheses/brackets.

### 2. **Semantic Errors**
- Checks for undefined variables.
- Ensures correct number and type of arguments for functions and visualizations.
- Reports errors for unsupported operations or invalid argument types.

### 3. **Runtime Errors in Generated Python**
- The generated code is robust against common Python errors (e.g., mismatched tick labels, invalid data types).
- Default values and error checks are inserted where possible (e.g., for boxplot tick labels).

### 4. **User Experience Refinements**
- All warnings from matplotlib are suppressed to avoid confusion in non-interactive environments.
- The code generator ensures that all output is clean and ready for use or further modification.

### 5. **Testing and Validation**
- Multiple test cases were created for both visualization and non-visualization features.
- Edge cases (e.g., floating point parsing, empty vectors, mismatched labels) were specifically tested and handled.


**End of Report**

---

If you want this in a specific format (Word, PDF, LaTeX), or want more detail in any section (e.g., code snippets, diagrams, test results), let me know!


# ======================
# File: README.md
# ======================

# WizuAll Compiler – Quick Start & Usage Guide

## 1. Prerequisites

- **Linux** or **WSL** environment
- **Python 3** installed (`python3 --version`)
- **pip** for Python 3 (`pip3 --version`)
- **make**, **gcc**, **flex**, and **bison** installed

### Install System Packages

```bash
sudo apt update
sudo apt install python3 python3-pip make gcc flex bison
```

## 2. Install Required Python Libraries

```bash
pip3 install matplotlib numpy
```

## 3. Build the WizuAll Compiler

In your project directory, run:

```bash
make clean
make
```

This will compile the WizuAll compiler executable.

## 4. Importing Data from JSON/CSV Files

You can import data variables directly from JSON or CSV files using the following syntax at the top of your `.wzl` file:

```wzl
import "data.json";
import "data.csv";
```
- After import, all top-level keys (for JSON) or columns (for CSV) become variables in your WizuAll code.
- Example usage:
  ```wzl
  import "data.json";
  plot(x, y);
  ```
- **Important:** Place all data files (e.g., `data.json`, `data.csv`) in the main project directory (the same directory where you run the compiler and where `output.py` is generated).

## 5. Compile and Run a WizuAll Program

To compile a WizuAll source file (for example, `examples/tc6.wzl`):

```bash
./wizuall_compiler examples/tc6.wzl
```

This will generate a Python file named `output.py` in the main directory.

To run the generated Python code:

```bash
python3 output.py
```

## 6. Plot Output Directory and File Naming

- All plot images are now saved in a subfolder called `plots/` in the main directory.
- The images are named `plot_<runid>_<counter>.png` for each run, where `<runid>` is a unique timestamp for that run and `<counter>` is the plot number (e.g., `plot_1717171717_1.png`).
- This ensures that plots from different runs will **not** overwrite each other.
- The `plots` directory is created automatically if it does not exist.
- **Tip:** You can easily identify which plots belong to which run by their `<runid>` value.

## 7. What to Expect

- **AST Output:**
  When you run the compiler, the AST for your WizuAll program will be displayed in the terminal before code generation.
- **Plots:**
  All plots are saved as PNG files in the `plots/` directory.
- **Print Statements:**
  Any `print` commands in your WizuAll script will output results directly to the terminal/command line.
- **Warnings:**
  Any matplotlib warnings (such as those about non-interactive backends) are automatically suppressed in the generated code.

## 8. Example Workflow

```bash
# 1. Build the compiler
make clean
make

# 2. Compile a WizuAll file (prints AST and generates output.py)
./wizuall_compiler < examples/tc6.wzl

# 3. Run the generated Python code
python3 output.py

# 4. Check the plots/ directory for generated plot images
ls plots/
```

## 9. Notes

- You can replace `examples/tc6.wzl` with any other `.wzl` file you wish to compile.
- Ensure all dependencies are installed before running the compiler or generated code.
- No shell scripts are required; all steps are manual and transparent.

---

**Enjoy using WizuAll for your data analysis and visualization needs!**



# ======================
# File: wizuall_parser.tab.c
# ======================

/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.5.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* First part of user prologue.  */
#line 1 "grammar/wizuall_parser.y"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "ir/ast.h"

ASTNode* final_ast = NULL;

// Add externs for line/column tracking
extern int yylineno;
extern int yycolumn;
extern char* yytext;

#line 84 "wizuall_parser.tab.c"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_YY_WIZUALL_PARSER_TAB_H_INCLUDED
# define YY_YY_WIZUALL_PARSER_TAB_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    NUMBER = 258,
    ID = 259,
    STRING = 260,
    LT = 261,
    GT = 262,
    IF = 263,
    ELSE = 264,
    WHILE = 265,
    FOR = 266,
    BEGIN_AUX = 267,
    END_AUX = 268,
    SORT = 269,
    REVERSE = 270,
    SLICE = 271,
    AVG = 272,
    TRANSPOSE = 273,
    RUNNING_SUM = 274,
    PAIRWISE_COMPARE = 275,
    PARETO_SET = 276,
    PLOT = 277,
    HISTOGRAM = 278,
    HEATMAP = 279,
    BARCHART = 280,
    PIECHART = 281,
    SCATTER = 282,
    BOXPLOT = 283,
    TIMELINE = 284,
    PLUS = 285,
    MINUS = 286,
    TIMES = 287,
    DIVIDE = 288,
    ASSIGN = 289,
    COMMA = 290,
    SEMICOLON = 291,
    LPAREN = 292,
    RPAREN = 293,
    LBRACE = 294,
    RBRACE = 295,
    LBRACKET = 296,
    RBRACKET = 297,
    IMPORT = 298
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 16 "grammar/wizuall_parser.y"

    double num;
    char* str;
    struct ASTNode* ast;
    struct ASTList* list;

#line 187 "wizuall_parser.tab.c"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif


extern YYSTYPE yylval;

int yyparse (void);

#endif /* !YY_YY_WIZUALL_PARSER_TAB_H_INCLUDED  */



#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))

/* Stored state numbers (used for stacks). */
typedef yytype_int8 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  36
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   211

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  44
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  19
/* YYNRULES -- Number of rules.  */
#define YYNRULES  51
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  126

#define YYUNDEFTOK  2
#define YYMAXUTOK   298


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint8 yyrline[] =
{
       0,    55,    55,    59,    60,    64,    65,    66,    67,    68,
      72,    76,    80,    82,    84,    89,    93,    94,    95,    96,
      97,    98,    99,   100,   104,   105,   106,   107,   108,   112,
     113,   114,   118,   119,   120,   121,   122,   123,   127,   132,
     133,   137,   138,   142,   143,   147,   148,   152,   153,   157,
     162,   166
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "NUMBER", "ID", "STRING", "LT", "GT",
  "IF", "ELSE", "WHILE", "FOR", "BEGIN_AUX", "END_AUX", "SORT", "REVERSE",
  "SLICE", "AVG", "TRANSPOSE", "RUNNING_SUM", "PAIRWISE_COMPARE",
  "PARETO_SET", "PLOT", "HISTOGRAM", "HEATMAP", "BARCHART", "PIECHART",
  "SCATTER", "BOXPLOT", "TIMELINE", "PLUS", "MINUS", "TIMES", "DIVIDE",
  "ASSIGN", "COMMA", "SEMICOLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE",
  "LBRACKET", "RBRACKET", "IMPORT", "$accept", "Program", "StatementList",
  "Statement", "ImportStatement", "Assignment", "ControlStructure",
  "FunctionCall", "VisualizationCall", "Expression", "Term", "Factor",
  "VectorLiteral", "VectorElements", "ArgListOpt", "ArgList",
  "VizArgListOpt", "VizArgList", "VizArg", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298
};
# endif

#define YYPACT_NINF (-29)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1)

#define yytable_value_is_error(Yyn) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int16 yypact[] =
{
     132,   -16,   -26,   -17,   -15,   -10,     2,     7,    15,    26,
      30,    37,    41,     8,    69,   132,   -29,   -29,    43,   -29,
      44,    45,     4,     4,     4,     4,    87,   147,   147,   147,
     147,   147,   147,   147,   147,    56,   -29,   -29,   -29,   -29,
     -29,   -29,    59,   -29,     4,     4,   -29,   160,     5,   -29,
     -29,   160,    55,    62,    88,   138,    67,    66,    39,   160,
      73,    80,   -29,    86,    89,    99,   100,   101,   103,   115,
     -29,   141,   160,   -23,     4,     4,     4,     4,     4,     4,
     -29,     4,    65,    68,     4,   159,   -29,   147,   -29,   -29,
     -29,   -29,   -29,   -29,   -29,   -29,     4,   -29,     5,     5,
       5,     5,   -29,   -29,   160,   132,   132,    17,   -29,   160,
     -29,   160,     6,    32,    87,   116,   -29,   127,   131,   135,
     132,   132,    60,   106,   -29,   -29
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int8 yydefact[] =
{
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     2,     3,     5,     0,     7,
       0,     0,     0,    42,     0,     0,     0,    46,    46,    46,
      46,    46,    46,    46,    46,     0,     1,     4,     6,     9,
       8,    32,    33,    34,     0,     0,    36,    11,    28,    31,
      35,    43,     0,    41,     0,     0,     0,     0,    33,    51,
       0,    45,    47,     0,     0,     0,     0,     0,     0,     0,
      10,     0,    39,     0,     0,     0,     0,     0,     0,     0,
      15,     0,     0,     0,     0,     0,    16,     0,    17,    18,
      19,    20,    21,    22,    23,    37,     0,    38,    26,    27,
      24,    25,    29,    30,    44,     0,     0,     0,    34,    50,
      48,    40,     0,     0,     0,     0,    13,     0,     0,     0,
       0,     0,     0,     0,    12,    14
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
     -29,   -29,    72,   -14,   -29,   -24,   -29,     0,   -29,   -19,
     134,   -28,   -29,   -29,   -29,   -29,   173,   -29,    93
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int8 yydefgoto[] =
{
      -1,    14,    15,    16,    17,    18,    19,    46,    21,    59,
      48,    49,    50,    73,    52,    53,    60,    61,    62
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int8 yytable[] =
{
      20,    37,    57,    47,    51,    54,    55,    41,    42,    43,
       1,    24,    96,    35,     2,    20,     3,     4,    22,    97,
      25,    23,    26,    74,    75,    71,    72,    27,     5,     6,
       7,     8,     9,    10,    11,    12,     1,    78,    79,    28,
       2,    44,     3,     4,    29,    45,   115,    76,    77,    13,
     102,   103,    30,   114,     5,     6,     7,     8,     9,    10,
      11,    12,   104,    31,     1,   107,   109,    32,     2,    36,
       3,     4,   116,    85,    33,    13,    23,   111,    34,    38,
      39,    40,     5,     6,     7,     8,     9,    10,    11,    12,
     117,    56,    70,    80,    74,    75,    23,    81,    37,    37,
     124,    22,    84,    13,   105,    20,    20,   106,    37,    37,
       1,    86,    20,    20,     2,    87,     3,     4,    76,    77,
      20,    20,    20,    20,    88,   118,    82,    89,     5,     6,
       7,     8,     9,    10,    11,    12,     1,    90,    91,    92,
       2,    93,     3,     4,    74,    75,   125,    74,    75,    13,
      41,    58,    43,    94,     5,     6,     7,     8,     9,    10,
      11,    12,    41,    42,   108,   119,    74,    75,    76,    77,
     120,    76,    77,     0,   121,    13,    83,   112,   113,    95,
     110,     0,     0,     0,    44,     0,     0,     0,    45,     0,
      76,    77,   122,   123,     0,     0,    44,     0,     0,     0,
      45,    63,    64,    65,    66,    67,    68,    69,    98,    99,
     100,   101
};

static const yytype_int8 yycheck[] =
{
       0,    15,    26,    22,    23,    24,    25,     3,     4,     5,
       4,    37,    35,     5,     8,    15,    10,    11,    34,    42,
      37,    37,    37,     6,     7,    44,    45,    37,    22,    23,
      24,    25,    26,    27,    28,    29,     4,    32,    33,    37,
       8,    37,    10,    11,    37,    41,    40,    30,    31,    43,
      78,    79,    37,    36,    22,    23,    24,    25,    26,    27,
      28,    29,    81,    37,     4,    84,    85,    37,     8,     0,
      10,    11,    40,    34,    37,    43,    37,    96,    37,    36,
      36,    36,    22,    23,    24,    25,    26,    27,    28,    29,
     114,     4,    36,    38,     6,     7,    37,    35,   112,   113,
      40,    34,    36,    43,    39,   105,   106,    39,   122,   123,
       4,    38,   112,   113,     8,    35,    10,    11,    30,    31,
     120,   121,   122,   123,    38,     9,    38,    38,    22,    23,
      24,    25,    26,    27,    28,    29,     4,    38,    38,    38,
       8,    38,    10,    11,     6,     7,    40,     6,     7,    43,
       3,     4,     5,    38,    22,    23,    24,    25,    26,    27,
      28,    29,     3,     4,     5,    38,     6,     7,    30,    31,
      39,    30,    31,    -1,    39,    43,    38,   105,   106,    38,
      87,    -1,    -1,    -1,    37,    -1,    -1,    -1,    41,    -1,
      30,    31,   120,   121,    -1,    -1,    37,    -1,    -1,    -1,
      41,    28,    29,    30,    31,    32,    33,    34,    74,    75,
      76,    77
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int8 yystos[] =
{
       0,     4,     8,    10,    11,    22,    23,    24,    25,    26,
      27,    28,    29,    43,    45,    46,    47,    48,    49,    50,
      51,    52,    34,    37,    37,    37,    37,    37,    37,    37,
      37,    37,    37,    37,    37,     5,     0,    47,    36,    36,
      36,     3,     4,     5,    37,    41,    51,    53,    54,    55,
      56,    53,    58,    59,    53,    53,     4,    49,     4,    53,
      60,    61,    62,    60,    60,    60,    60,    60,    60,    60,
      36,    53,    53,    57,     6,     7,    30,    31,    32,    33,
      38,    35,    38,    38,    36,    34,    38,    35,    38,    38,
      38,    38,    38,    38,    38,    38,    35,    42,    54,    54,
      54,    54,    55,    55,    53,    39,    39,    53,     5,    53,
      62,    53,    46,    46,    36,    40,    40,    49,     9,    38,
      39,    39,    46,    46,    40,    40
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int8 yyr1[] =
{
       0,    44,    45,    46,    46,    47,    47,    47,    47,    47,
      48,    49,    50,    50,    50,    51,    52,    52,    52,    52,
      52,    52,    52,    52,    53,    53,    53,    53,    53,    54,
      54,    54,    55,    55,    55,    55,    55,    55,    56,    57,
      57,    58,    58,    59,    59,    60,    60,    61,    61,    62,
      62,    62
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     1,     2,     1,     2,     1,     2,     2,
       3,     3,    11,     7,    11,     4,     4,     4,     4,     4,
       4,     4,     4,     4,     3,     3,     3,     3,     1,     3,
       3,     1,     1,     1,     1,     1,     1,     3,     3,     1,
       3,     1,     0,     1,     3,     1,     0,     1,     3,     3,
       3,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyo, yytype, yyvaluep);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, int yyrule)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[+yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                                              );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
#  else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                yy_state_t *yyssp, int yytoken)
{
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Actual size of YYARG. */
  int yycount = 0;
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[+*yyssp];
      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
      yysize = yysize0;
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYPTRDIFF_T yysize1
                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    /* Don't count the "%s"s in the final size, but reserve room for
       the terminator.  */
    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
{
  YYUSE (yyvaluep);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYPTRDIFF_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
  case 2:
#line 55 "grammar/wizuall_parser.y"
                                   { final_ast = createProgramNode((yyvsp[0].list)); }
#line 1461 "wizuall_parser.tab.c"
    break;

  case 3:
#line 59 "grammar/wizuall_parser.y"
                                       { (yyval.list) = createASTList((yyvsp[0].ast)); }
#line 1467 "wizuall_parser.tab.c"
    break;

  case 4:
#line 60 "grammar/wizuall_parser.y"
                                       { (yyval.list) = appendASTList((yyvsp[-1].list), (yyvsp[0].ast)); }
#line 1473 "wizuall_parser.tab.c"
    break;

  case 10:
#line 72 "grammar/wizuall_parser.y"
                              { (yyval.ast) = createImportNode((yyvsp[-1].str)); }
#line 1479 "wizuall_parser.tab.c"
    break;

  case 11:
#line 76 "grammar/wizuall_parser.y"
                                   { (yyval.ast) = createAssignmentNode((yyvsp[-2].str), (yyvsp[0].ast)); }
#line 1485 "wizuall_parser.tab.c"
    break;

  case 12:
#line 81 "grammar/wizuall_parser.y"
        { (yyval.ast) = createIfElseNode((yyvsp[-8].ast), (yyvsp[-5].list), (yyvsp[-1].list)); }
#line 1491 "wizuall_parser.tab.c"
    break;

  case 13:
#line 83 "grammar/wizuall_parser.y"
        { (yyval.ast) = createWhileNode((yyvsp[-4].ast), (yyvsp[-1].list)); }
#line 1497 "wizuall_parser.tab.c"
    break;

  case 14:
#line 85 "grammar/wizuall_parser.y"
        { (yyval.ast) = createForNode((yyvsp[-8].ast), (yyvsp[-6].ast), (yyvsp[-4].ast), (yyvsp[-1].list)); }
#line 1503 "wizuall_parser.tab.c"
    break;

  case 15:
#line 89 "grammar/wizuall_parser.y"
                                   { (yyval.ast) = createFunctionCallNode((yyvsp[-3].str), (yyvsp[-1].list)); }
#line 1509 "wizuall_parser.tab.c"
    break;

  case 16:
#line 93 "grammar/wizuall_parser.y"
                                            { (yyval.ast) = createVizCallNode("plot",      (yyvsp[-1].list)); }
#line 1515 "wizuall_parser.tab.c"
    break;

  case 17:
#line 94 "grammar/wizuall_parser.y"
                                            { (yyval.ast) = createVizCallNode("histogram", (yyvsp[-1].list)); }
#line 1521 "wizuall_parser.tab.c"
    break;

  case 18:
#line 95 "grammar/wizuall_parser.y"
                                            { (yyval.ast) = createVizCallNode("heatmap",   (yyvsp[-1].list)); }
#line 1527 "wizuall_parser.tab.c"
    break;

  case 19:
#line 96 "grammar/wizuall_parser.y"
                                            { (yyval.ast) = createVizCallNode("barchart",  (yyvsp[-1].list)); }
#line 1533 "wizuall_parser.tab.c"
    break;

  case 20:
#line 97 "grammar/wizuall_parser.y"
                                            { (yyval.ast) = createVizCallNode("piechart",  (yyvsp[-1].list)); }
#line 1539 "wizuall_parser.tab.c"
    break;

  case 21:
#line 98 "grammar/wizuall_parser.y"
                                            { (yyval.ast) = createVizCallNode("scatter",   (yyvsp[-1].list)); }
#line 1545 "wizuall_parser.tab.c"
    break;

  case 22:
#line 99 "grammar/wizuall_parser.y"
                                            { (yyval.ast) = createVizCallNode("boxplot",   (yyvsp[-1].list)); }
#line 1551 "wizuall_parser.tab.c"
    break;

  case 23:
#line 100 "grammar/wizuall_parser.y"
                                            { (yyval.ast) = createVizCallNode("timeline",  (yyvsp[-1].list)); }
#line 1557 "wizuall_parser.tab.c"
    break;

  case 24:
#line 104 "grammar/wizuall_parser.y"
                                   { (yyval.ast) = createBinaryOpNode(OP_PLUS , (yyvsp[-2].ast), (yyvsp[0].ast)); }
#line 1563 "wizuall_parser.tab.c"
    break;

  case 25:
#line 105 "grammar/wizuall_parser.y"
                                    { (yyval.ast) = createBinaryOpNode(OP_MINUS, (yyvsp[-2].ast), (yyvsp[0].ast)); }
#line 1569 "wizuall_parser.tab.c"
    break;

  case 26:
#line 106 "grammar/wizuall_parser.y"
                                    { (yyval.ast) = createBinaryOpNode(OP_LT, (yyvsp[-2].ast), (yyvsp[0].ast)); }
#line 1575 "wizuall_parser.tab.c"
    break;

  case 27:
#line 107 "grammar/wizuall_parser.y"
                                    { (yyval.ast) = createBinaryOpNode(OP_GT, (yyvsp[-2].ast), (yyvsp[0].ast)); }
#line 1581 "wizuall_parser.tab.c"
    break;

  case 29:
#line 112 "grammar/wizuall_parser.y"
                                    { (yyval.ast) = createBinaryOpNode(OP_TIMES, (yyvsp[-2].ast), (yyvsp[0].ast)); }
#line 1587 "wizuall_parser.tab.c"
    break;

  case 30:
#line 113 "grammar/wizuall_parser.y"
                                    { (yyval.ast) = createBinaryOpNode(OP_DIVIDE, (yyvsp[-2].ast), (yyvsp[0].ast)); }
#line 1593 "wizuall_parser.tab.c"
    break;

  case 32:
#line 118 "grammar/wizuall_parser.y"
                                    { (yyval.ast) = createNumberNode((yyvsp[0].num)); }
#line 1599 "wizuall_parser.tab.c"
    break;

  case 33:
#line 119 "grammar/wizuall_parser.y"
                                    { (yyval.ast) = createIdNode((yyvsp[0].str)); }
#line 1605 "wizuall_parser.tab.c"
    break;

  case 34:
#line 120 "grammar/wizuall_parser.y"
                                    { (yyval.ast) = createStringNode((yyvsp[0].str)); }
#line 1611 "wizuall_parser.tab.c"
    break;

  case 35:
#line 121 "grammar/wizuall_parser.y"
                                    { (yyval.ast) = (yyvsp[0].ast); }
#line 1617 "wizuall_parser.tab.c"
    break;

  case 36:
#line 122 "grammar/wizuall_parser.y"
                                    { (yyval.ast) = (yyvsp[0].ast); }
#line 1623 "wizuall_parser.tab.c"
    break;

  case 37:
#line 123 "grammar/wizuall_parser.y"
                                    { (yyval.ast) = (yyvsp[-1].ast); }
#line 1629 "wizuall_parser.tab.c"
    break;

  case 38:
#line 127 "grammar/wizuall_parser.y"
                                       { (yyval.ast) = createVectorNode((yyvsp[-1].list)); }
#line 1635 "wizuall_parser.tab.c"
    break;

  case 39:
#line 132 "grammar/wizuall_parser.y"
                                           { (yyval.list) = createASTList((yyvsp[0].ast)); }
#line 1641 "wizuall_parser.tab.c"
    break;

  case 40:
#line 133 "grammar/wizuall_parser.y"
                                           { (yyval.list) = appendASTList((yyvsp[-2].list), (yyvsp[0].ast)); }
#line 1647 "wizuall_parser.tab.c"
    break;

  case 41:
#line 137 "grammar/wizuall_parser.y"
                                     { (yyval.list) = (yyvsp[0].list); }
#line 1653 "wizuall_parser.tab.c"
    break;

  case 42:
#line 138 "grammar/wizuall_parser.y"
                                     { (yyval.list) = NULL; }
#line 1659 "wizuall_parser.tab.c"
    break;

  case 43:
#line 142 "grammar/wizuall_parser.y"
                                     { (yyval.list) = createASTList((yyvsp[0].ast)); }
#line 1665 "wizuall_parser.tab.c"
    break;

  case 44:
#line 143 "grammar/wizuall_parser.y"
                                     { (yyval.list) = appendASTList((yyvsp[-2].list), (yyvsp[0].ast)); }
#line 1671 "wizuall_parser.tab.c"
    break;

  case 45:
#line 147 "grammar/wizuall_parser.y"
                                     { (yyval.list) = (yyvsp[0].list); }
#line 1677 "wizuall_parser.tab.c"
    break;

  case 46:
#line 148 "grammar/wizuall_parser.y"
                                     { (yyval.list) = NULL; }
#line 1683 "wizuall_parser.tab.c"
    break;

  case 47:
#line 152 "grammar/wizuall_parser.y"
                                     { (yyval.list) = createASTList((yyvsp[0].ast)); }
#line 1689 "wizuall_parser.tab.c"
    break;

  case 48:
#line 153 "grammar/wizuall_parser.y"
                                     { (yyval.list) = appendASTList((yyvsp[-2].list), (yyvsp[0].ast)); }
#line 1695 "wizuall_parser.tab.c"
    break;

  case 49:
#line 158 "grammar/wizuall_parser.y"
        {   ASTNode* key = createIdNode((yyvsp[-2].str));
            ASTNode* val = createStringNode((yyvsp[0].str));
            (yyval.ast) = createBinaryOpNode(OP_ASSIGN, key, val);
        }
#line 1704 "wizuall_parser.tab.c"
    break;

  case 50:
#line 163 "grammar/wizuall_parser.y"
        {   ASTNode* key = createIdNode((yyvsp[-2].str));
            (yyval.ast) = createBinaryOpNode(OP_ASSIGN, key, (yyvsp[0].ast));
        }
#line 1712 "wizuall_parser.tab.c"
    break;

  case 51:
#line 166 "grammar/wizuall_parser.y"
                                     { (yyval.ast) = (yyvsp[0].ast); }
#line 1718 "wizuall_parser.tab.c"
    break;


#line 1722 "wizuall_parser.tab.c"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[+*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 169 "grammar/wizuall_parser.y"
  /* ----------  C code section ---------- */

void yyerror(const char *s) {
    fprintf(stderr, "Parse error at line %d, column %d: %s\n", yylineno, yycolumn, s);
    if (yytext) {
        fprintf(stderr, "Near token: '%s'\n", yytext);
    }
}
    


# ======================
# File: wizuall_parser.tab.h
# ======================

/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison interface for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

#ifndef YY_YY_WIZUALL_PARSER_TAB_H_INCLUDED
# define YY_YY_WIZUALL_PARSER_TAB_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    NUMBER = 258,
    ID = 259,
    STRING = 260,
    LT = 261,
    GT = 262,
    IF = 263,
    ELSE = 264,
    WHILE = 265,
    FOR = 266,
    BEGIN_AUX = 267,
    END_AUX = 268,
    SORT = 269,
    REVERSE = 270,
    SLICE = 271,
    AVG = 272,
    TRANSPOSE = 273,
    RUNNING_SUM = 274,
    PAIRWISE_COMPARE = 275,
    PARETO_SET = 276,
    PLOT = 277,
    HISTOGRAM = 278,
    HEATMAP = 279,
    BARCHART = 280,
    PIECHART = 281,
    SCATTER = 282,
    BOXPLOT = 283,
    TIMELINE = 284,
    PLUS = 285,
    MINUS = 286,
    TIMES = 287,
    DIVIDE = 288,
    ASSIGN = 289,
    COMMA = 290,
    SEMICOLON = 291,
    LPAREN = 292,
    RPAREN = 293,
    LBRACE = 294,
    RBRACE = 295,
    LBRACKET = 296,
    RBRACKET = 297,
    IMPORT = 298
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 16 "grammar/wizuall_parser.y"

    double num;
    char* str;
    struct ASTNode* ast;
    struct ASTList* list;

#line 108 "wizuall_parser.tab.h"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif


extern YYSTYPE yylval;

int yyparse (void);

#endif /* !YY_YY_WIZUALL_PARSER_TAB_H_INCLUDED  */


# ======================
# File: codegen\emit_utils.c
# ======================



# ======================
# File: codegen\python_emitter.c
# ======================



# ======================
# File: core\config.h
# ======================



# ======================
# File: core\main.c
# ======================

#include <stdio.h>
#include <stdlib.h>
#include "../ir/ast.h"
#include "../ir/codegen.h"

// Declare parser function
extern int yyparse();
extern ASTNode* final_ast;

int main() {
    printf("Enter WizuAll code or feed file through < operator.\n");
    if (yyparse() == 0) {
        printf("\n✅ Parsing successful! Here's the AST:\n\n");
        printAST(final_ast, 0);
        FILE* out = fopen("output.py", "w");
        if (out) {
            generate_code(final_ast, out,0);
            fclose(out);
            printf("\n🚀 Python code generated in output.py\n");
        } else {
            printf("\n❌ Could not open output.py for writing.\n");
        }
    } else {
        printf("\n❌ Parsing failed.\n");
    }
    return 0;
}


# ======================
# File: grammar\ast_builder.c
# ======================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "ast.h"

// --- Node Creation Functions ---

ASTNode* createNumberNode(double value) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_NUMBER;
    node->num_value = value;
    return node;
}

ASTNode* createIdNode(char* name) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_ID;
    node->id_name = strdup(name);
    return node;
}

ASTNode* createAssignmentNode(char* name, ASTNode* expr) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_ASSIGNMENT;
    node->assignment.var_name = strdup(name);
    node->assignment.expr = expr;
    return node;
}

ASTNode* createBinaryOpNode(BinaryOpType op, ASTNode* left, ASTNode* right) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_BINARY_OP;
    node->binary_op.op = op;
    node->binary_op.left = left;
    node->binary_op.right = right;
    return node;
}

ASTNode* createVectorNode(ASTList* elements) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_VECTOR_LITERAL;
    node->vector_literal.elements = elements;
    return node;
}

ASTNode* createFunctionCallNode(char* name, ASTList* args) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_FUNCTION_CALL;
    node->function_call.func_name = strdup(name);
    node->function_call.args = args;
    return node;
}

ASTNode* createVizCallNode(char* name, ASTList* args) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_VIZ_CALL;
    node->viz_call.viz_func = strdup(name);
    node->viz_call.args = args;
    return node;
}

ASTNode* createIfElseNode(ASTNode* cond, ASTList* if_body, ASTList* else_body) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_IF_ELSE;
    node->if_else.condition = cond;
    node->if_else.if_body = if_body;
    node->if_else.else_body = else_body;
    return node;
}

ASTNode* createWhileNode(ASTNode* cond, ASTList* body) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_WHILE_LOOP;
    node->while_loop.condition = cond;
    node->while_loop.body = body;
    return node;
}

ASTNode* createForNode(ASTNode* init, ASTNode* cond, ASTNode* incr, ASTList* body) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_FOR_LOOP;
    node->for_loop.init = init;
    node->for_loop.condition = cond;
    node->for_loop.increment = incr;
    node->for_loop.body = body;
    return node;
}

ASTNode* createAuxBlockNode(char* code) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_AUX_BLOCK;
    node->aux_block.raw_code = strdup(code);
    return node;
}

// --- AST List Functions ---

ASTList* createASTList(ASTNode* node) {
    ASTList* list = malloc(sizeof(ASTList));
    list->node = node;
    list->next = NULL;
    return list;
}

ASTList* appendASTList(ASTList* list, ASTNode* node) {
    if (!list) return createASTList(node);

    ASTList* temp = list;
    while (temp->next) temp = temp->next;
    temp->next = createASTList(node);
    return list;
}

// --- Debug Print Functions (Optional) ---

void printAST(ASTNode* node, int level) {
    if (!node) return;
    for (int i = 0; i < level; i++) printf("  ");
    printf("NodeType: %d\n", node->type);
    // Expand later if needed
}


# ======================
# File: grammar\wizuall_parser.c
# ======================

/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.5.1"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 0

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1




/* First part of user prologue.  */
#line 1 "grammar/wizuall_parser.y"

#include <stdio.h>
#include <stdlib.h>
#include <string.h>


// Forward declarations
int yylex();
void yyerror(const char *s);


#line 83 "grammar/wizuall_parser.c"

# ifndef YY_CAST
#  ifdef __cplusplus
#   define YY_CAST(Type, Val) static_cast<Type> (Val)
#   define YY_REINTERPRET_CAST(Type, Val) reinterpret_cast<Type> (Val)
#  else
#   define YY_CAST(Type, Val) ((Type) (Val))
#   define YY_REINTERPRET_CAST(Type, Val) ((Type) (Val))
#  endif
# endif
# ifndef YY_NULLPTR
#  if defined __cplusplus
#   if 201103L <= __cplusplus
#    define YY_NULLPTR nullptr
#   else
#    define YY_NULLPTR 0
#   endif
#  else
#   define YY_NULLPTR ((void*)0)
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* Use api.header.include to #include this header
   instead of duplicating it here.  */
#ifndef YY_YY_GRAMMAR_WIZUALL_PARSER_H_INCLUDED
# define YY_YY_GRAMMAR_WIZUALL_PARSER_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    NUMBER = 258,
    STRING = 259,
    ID = 260,
    IF = 261,
    ELSE = 262,
    WHILE = 263,
    FOR = 264,
    BEGIN_AUX = 265,
    END_AUX = 266,
    SORT = 267,
    REVERSE = 268,
    SLICE = 269,
    AVG = 270,
    TRANSPOSE = 271,
    RUNNING_SUM = 272,
    PAIRWISE_COMPARE = 273,
    PARETO_SET = 274,
    PLOT = 275,
    HISTOGRAM = 276,
    HEATMAP = 277,
    BARCHART = 278,
    PIECHART = 279,
    SCATTER = 280,
    BOXPLOT = 281,
    TIMELINE = 282,
    PLUS = 283,
    MINUS = 284,
    TIMES = 285,
    DIVIDE = 286,
    ASSIGN = 287,
    COMMA = 288,
    SEMICOLON = 289,
    LPAREN = 290,
    RPAREN = 291,
    LBRACE = 292,
    RBRACE = 293,
    LBRACKET = 294,
    RBRACKET = 295
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 14 "grammar/wizuall_parser.y"

    int num;
    char* str;
    struct ASTNode* ast;

#line 182 "grammar/wizuall_parser.c"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif


extern YYSTYPE yylval;

int yyparse (void);

#endif /* !YY_YY_GRAMMAR_WIZUALL_PARSER_H_INCLUDED  */



#ifdef short
# undef short
#endif

/* On compilers that do not define __PTRDIFF_MAX__ etc., make sure
   <limits.h> and (if available) <stdint.h> are included
   so that the code can choose integer types of a good width.  */

#ifndef __PTRDIFF_MAX__
# include <limits.h> /* INFRINGES ON USER NAME SPACE */
# if defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stdint.h> /* INFRINGES ON USER NAME SPACE */
#  define YY_STDINT_H
# endif
#endif

/* Narrow types that promote to a signed type and that can represent a
   signed or unsigned integer of at least N bits.  In tables they can
   save space and decrease cache pressure.  Promoting to a signed type
   helps avoid bugs in integer arithmetic.  */

#ifdef __INT_LEAST8_MAX__
typedef __INT_LEAST8_TYPE__ yytype_int8;
#elif defined YY_STDINT_H
typedef int_least8_t yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef __INT_LEAST16_MAX__
typedef __INT_LEAST16_TYPE__ yytype_int16;
#elif defined YY_STDINT_H
typedef int_least16_t yytype_int16;
#else
typedef short yytype_int16;
#endif

#if defined __UINT_LEAST8_MAX__ && __UINT_LEAST8_MAX__ <= __INT_MAX__
typedef __UINT_LEAST8_TYPE__ yytype_uint8;
#elif (!defined __UINT_LEAST8_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST8_MAX <= INT_MAX)
typedef uint_least8_t yytype_uint8;
#elif !defined __UINT_LEAST8_MAX__ && UCHAR_MAX <= INT_MAX
typedef unsigned char yytype_uint8;
#else
typedef short yytype_uint8;
#endif

#if defined __UINT_LEAST16_MAX__ && __UINT_LEAST16_MAX__ <= __INT_MAX__
typedef __UINT_LEAST16_TYPE__ yytype_uint16;
#elif (!defined __UINT_LEAST16_MAX__ && defined YY_STDINT_H \
       && UINT_LEAST16_MAX <= INT_MAX)
typedef uint_least16_t yytype_uint16;
#elif !defined __UINT_LEAST16_MAX__ && USHRT_MAX <= INT_MAX
typedef unsigned short yytype_uint16;
#else
typedef int yytype_uint16;
#endif

#ifndef YYPTRDIFF_T
# if defined __PTRDIFF_TYPE__ && defined __PTRDIFF_MAX__
#  define YYPTRDIFF_T __PTRDIFF_TYPE__
#  define YYPTRDIFF_MAXIMUM __PTRDIFF_MAX__
# elif defined PTRDIFF_MAX
#  ifndef ptrdiff_t
#   include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  endif
#  define YYPTRDIFF_T ptrdiff_t
#  define YYPTRDIFF_MAXIMUM PTRDIFF_MAX
# else
#  define YYPTRDIFF_T long
#  define YYPTRDIFF_MAXIMUM LONG_MAX
# endif
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif defined __STDC_VERSION__ && 199901 <= __STDC_VERSION__
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned
# endif
#endif

#define YYSIZE_MAXIMUM                                  \
  YY_CAST (YYPTRDIFF_T,                                 \
           (YYPTRDIFF_MAXIMUM < YY_CAST (YYSIZE_T, -1)  \
            ? YYPTRDIFF_MAXIMUM                         \
            : YY_CAST (YYSIZE_T, -1)))

#define YYSIZEOF(X) YY_CAST (YYPTRDIFF_T, sizeof (X))

/* Stored state numbers (used for stacks). */
typedef yytype_int8 yy_state_t;

/* State numbers in computations.  */
typedef int yy_state_fast_t;

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# if defined __GNUC__ && 2 < __GNUC__ + (96 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_PURE __attribute__ ((__pure__))
# else
#  define YY_ATTRIBUTE_PURE
# endif
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# if defined __GNUC__ && 2 < __GNUC__ + (7 <= __GNUC_MINOR__)
#  define YY_ATTRIBUTE_UNUSED __attribute__ ((__unused__))
# else
#  define YY_ATTRIBUTE_UNUSED
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && ! defined __ICC && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN                            \
    _Pragma ("GCC diagnostic push")                                     \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")              \
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END      \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif

#if defined __cplusplus && defined __GNUC__ && ! defined __ICC && 6 <= __GNUC__
# define YY_IGNORE_USELESS_CAST_BEGIN                          \
    _Pragma ("GCC diagnostic push")                            \
    _Pragma ("GCC diagnostic ignored \"-Wuseless-cast\"")
# define YY_IGNORE_USELESS_CAST_END            \
    _Pragma ("GCC diagnostic pop")
#endif
#ifndef YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_BEGIN
# define YY_IGNORE_USELESS_CAST_END
#endif


#define YY_ASSERT(E) ((void) (0 && (E)))

#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yy_state_t yyss_alloc;
  YYSTYPE yyvs_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (YYSIZEOF (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (YYSIZEOF (yy_state_t) + YYSIZEOF (YYSTYPE)) \
      + YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYPTRDIFF_T yynewbytes;                                         \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * YYSIZEOF (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / YYSIZEOF (*yyptr);                        \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, YY_CAST (YYSIZE_T, (Count)) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYPTRDIFF_T yyi;                      \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  29
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   101

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  41
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  22
/* YYNRULES -- Number of rules.  */
#define YYNRULES  53
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  102

#define YYUNDEFTOK  2
#define YYMAXUTOK   295


/* YYTRANSLATE(TOKEN-NUM) -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, with out-of-bounds checking.  */
#define YYTRANSLATE(YYX)                                                \
  (0 <= (YYX) && (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex.  */
static const yytype_int8 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint8 yyrline[] =
{
       0,    55,    55,    59,    60,    64,    65,    66,    67,    68,
      72,    76,    77,    78,    82,    86,    90,    90,    90,    90,
      90,    90,    90,    90,    94,    98,   102,   103,   104,   108,
     109,   110,   114,   115,   116,   117,   118,   122,   126,   127,
     131,   132,   133,   134,   138,   139,   143,   144,   148,   149,
     153,   154,   158,   159
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "NUMBER", "STRING", "ID", "IF", "ELSE",
  "WHILE", "FOR", "BEGIN_AUX", "END_AUX", "SORT", "REVERSE", "SLICE",
  "AVG", "TRANSPOSE", "RUNNING_SUM", "PAIRWISE_COMPARE", "PARETO_SET",
  "PLOT", "HISTOGRAM", "HEATMAP", "BARCHART", "PIECHART", "SCATTER",
  "BOXPLOT", "TIMELINE", "PLUS", "MINUS", "TIMES", "DIVIDE", "ASSIGN",
  "COMMA", "SEMICOLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", "LBRACKET",
  "RBRACKET", "$accept", "Program", "StatementList", "Statement",
  "Assignment", "ControlStructure", "FunctionCall", "VisualizationCall",
  "PlotFunction", "AuxBlock", "AuxStatements", "Expression", "Term",
  "Factor", "VectorLiteral", "VectorElementsOpt", "VectorElements",
  "ArgListOpt", "ArgList", "VizArgListOpt", "VizArgList", "VizArg", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_int16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295
};
# endif

#define YYPACT_NINF (-30)

#define yypact_value_is_default(Yyn) \
  ((Yyn) == YYPACT_NINF)

#define YYTABLE_NINF (-1)

#define yytable_value_is_error(Yyn) \
  0

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const yytype_int8 yypact[] =
{
      49,    -4,   -14,    16,    42,   -30,   -30,   -30,   -30,   -30,
     -30,   -30,   -30,   -30,     9,   -30,    49,   -30,   -30,   -30,
     -30,    43,   -30,     3,     3,     3,     3,    14,    13,   -30,
     -30,    17,   -30,   -30,     3,     3,     3,    32,   -18,   -30,
     -30,     8,    -3,   -30,   -13,   -11,    47,    48,   -30,    51,
      32,    50,   -30,    52,   -30,    -2,    20,    54,    44,   -30,
       3,     3,     3,     3,     3,   -30,    53,    55,     3,    84,
     -30,    17,   -30,     3,     3,   -30,   -18,   -18,   -30,   -30,
     -30,    49,    49,     1,   -30,   -30,   -30,   -30,    56,    57,
      14,    82,   -30,    60,    61,    62,    49,    49,    59,    63,
     -30,   -30
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_int8 yydefact[] =
{
       0,     0,     0,     0,     0,    25,    16,    17,    18,    19,
      20,    21,    22,    23,     0,     2,     4,     5,     6,     7,
       8,     0,     9,     0,    45,     0,     0,     0,     0,     1,
       3,    49,    36,    35,     0,     0,    39,    10,    28,    31,
      34,    46,     0,    44,     0,     0,     0,     0,    24,    35,
      52,     0,    48,    50,    32,     0,    40,    34,     0,    38,
       0,     0,     0,     0,     0,    14,     0,     0,     0,     0,
      15,     0,    33,     0,     0,    37,    26,    27,    29,    30,
      47,     0,     0,     0,    53,    51,    41,    43,     0,     0,
       0,     0,    12,     0,     0,     0,     0,     0,     0,     0,
      11,    13
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int8 yypgoto[] =
{
     -30,   -30,   -16,   -30,   -26,   -30,   -30,   -30,   -30,   -30,
     -30,   -21,     2,   -23,   -29,   -30,    -6,   -30,    27,   -30,
      22,   -30
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int8 yydefgoto[] =
{
      -1,    14,    15,    16,    17,    18,    19,    20,    21,    22,
      28,    56,    38,    39,    40,    58,    59,    42,    43,    51,
      52,    53
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int8 yytable[] =
{
      30,    47,    37,    41,    44,    45,    32,    57,    33,    29,
      50,    54,    62,    63,    55,    60,    61,    60,    61,    46,
      32,    25,    49,    66,    48,    67,    60,    61,    23,    60,
      61,    24,    34,    65,    72,    90,    60,    61,    35,    78,
      79,    64,    36,    41,    57,    57,    34,    83,    60,    61,
      50,    26,    35,    73,     1,     2,    36,     3,     4,     5,
      60,    61,    76,    77,    93,    88,    89,    86,    87,     6,
       7,     8,     9,    10,    11,    12,    13,    27,    31,    23,
      98,    99,    68,    69,    75,    71,    70,    74,    84,    94,
      81,    80,    82,    85,    91,    92,    95,   100,    96,    97,
       0,   101
};

static const yytype_int8 yycheck[] =
{
      16,    27,    23,    24,    25,    26,     3,    36,     5,     0,
      31,    34,    30,    31,    35,    28,    29,    28,    29,     5,
       3,    35,     5,    36,    11,    36,    28,    29,    32,    28,
      29,    35,    29,    36,    36,    34,    28,    29,    35,    62,
      63,    33,    39,    64,    73,    74,    29,    68,    28,    29,
      71,    35,    35,    33,     5,     6,    39,     8,     9,    10,
      28,    29,    60,    61,    90,    81,    82,    73,    74,    20,
      21,    22,    23,    24,    25,    26,    27,    35,    35,    32,
      96,    97,    34,    32,    40,    33,    36,    33,     4,     7,
      37,    64,    37,    71,    38,    38,    36,    38,    37,    37,
      -1,    38
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_int8 yystos[] =
{
       0,     5,     6,     8,     9,    10,    20,    21,    22,    23,
      24,    25,    26,    27,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    32,    35,    35,    35,    35,    51,     0,
      43,    35,     3,     5,    29,    35,    39,    52,    53,    54,
      55,    52,    58,    59,    52,    52,     5,    45,    11,     5,
      52,    60,    61,    62,    54,    52,    52,    55,    56,    57,
      28,    29,    30,    31,    33,    36,    36,    36,    34,    32,
      36,    33,    36,    33,    33,    40,    53,    53,    54,    54,
      59,    37,    37,    52,     4,    61,    57,    57,    43,    43,
      34,    38,    38,    45,     7,    36,    37,    37,    43,    43,
      38,    38
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_int8 yyr1[] =
{
       0,    41,    42,    43,    43,    44,    44,    44,    44,    44,
      45,    46,    46,    46,    47,    48,    49,    49,    49,    49,
      49,    49,    49,    49,    50,    51,    52,    52,    52,    53,
      53,    53,    54,    54,    54,    54,    54,    55,    56,    56,
      57,    57,    57,    57,    58,    58,    59,    59,    60,    60,
      61,    61,    62,    62
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_int8 yyr2[] =
{
       0,     2,     1,     2,     1,     1,     1,     1,     1,     1,
       3,    11,     7,    11,     4,     4,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     0,     3,     3,     1,     3,
       3,     1,     2,     3,     1,     1,     1,     3,     1,     0,
       1,     3,     1,     3,     1,     0,     1,     3,     1,     0,
       1,     3,     1,     3
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                    \
  do                                                              \
    if (yychar == YYEMPTY)                                        \
      {                                                           \
        yychar = (Token);                                         \
        yylval = (Value);                                         \
        YYPOPSTACK (yylen);                                       \
        yystate = *yyssp;                                         \
        goto yybackup;                                            \
      }                                                           \
    else                                                          \
      {                                                           \
        yyerror (YY_("syntax error: cannot back up")); \
        YYERROR;                                                  \
      }                                                           \
  while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256



/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)

/* This macro is provided for backward compatibility. */
#ifndef YY_LOCATION_PRINT
# define YY_LOCATION_PRINT(File, Loc) ((void) 0)
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*-----------------------------------.
| Print this symbol's value on YYO.  |
`-----------------------------------*/

static void
yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)
{
  FILE *yyoutput = yyo;
  YYUSE (yyoutput);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyo, yytoknum[yytype], *yyvaluep);
# endif
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}


/*---------------------------.
| Print this symbol on YYO.  |
`---------------------------*/

static void
yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)
{
  YYFPRINTF (yyo, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  yy_symbol_value_print (yyo, yytype, yyvaluep);
  YYFPRINTF (yyo, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yy_state_t *yybottom, yy_state_t *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yy_state_t *yyssp, YYSTYPE *yyvsp, int yyrule)
{
  int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %d):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[+yyssp[yyi + 1 - yynrhs]],
                       &yyvsp[(yyi + 1) - (yynrhs)]
                                              );
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, Rule); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen(S) (YY_CAST (YYPTRDIFF_T, strlen (S)))
#  else
/* Return the length of YYSTR.  */
static YYPTRDIFF_T
yystrlen (const char *yystr)
{
  YYPTRDIFF_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYPTRDIFF_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYPTRDIFF_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            else
              goto append;

          append:
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (yyres)
    return yystpcpy (yyres, yystr) - yyres;
  else
    return yystrlen (yystr);
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYPTRDIFF_T *yymsg_alloc, char **yymsg,
                yy_state_t *yyssp, int yytoken)
{
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat: reported tokens (one for the "unexpected",
     one per "expected"). */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Actual size of YYARG. */
  int yycount = 0;
  /* Cumulated lengths of YYARG.  */
  YYPTRDIFF_T yysize = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[+*yyssp];
      YYPTRDIFF_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
      yysize = yysize0;
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYPTRDIFF_T yysize1
                    = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
                    yysize = yysize1;
                  else
                    return 2;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
    default: /* Avoid compiler warnings. */
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    /* Don't count the "%s"s in the final size, but reserve room for
       the terminator.  */
    YYPTRDIFF_T yysize1 = yysize + (yystrlen (yyformat) - 2 * yycount) + 1;
    if (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM)
      yysize = yysize1;
    else
      return 2;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          ++yyp;
          ++yyformat;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)
{
  YYUSE (yyvaluep);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/* The lookahead symbol.  */
int yychar;

/* The semantic value of the lookahead symbol.  */
YYSTYPE yylval;
/* Number of syntax errors so far.  */
int yynerrs;


/*----------.
| yyparse.  |
`----------*/

int
yyparse (void)
{
    yy_state_fast_t yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yy_state_t yyssa[YYINITDEPTH];
    yy_state_t *yyss;
    yy_state_t *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    YYPTRDIFF_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYPTRDIFF_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  goto yysetstate;


/*------------------------------------------------------------.
| yynewstate -- push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;


/*--------------------------------------------------------------------.
| yysetstate -- set current state (the top of the stack) to yystate.  |
`--------------------------------------------------------------------*/
yysetstate:
  YYDPRINTF ((stderr, "Entering state %d\n", yystate));
  YY_ASSERT (0 <= yystate && yystate < YYNSTATES);
  YY_IGNORE_USELESS_CAST_BEGIN
  *yyssp = YY_CAST (yy_state_t, yystate);
  YY_IGNORE_USELESS_CAST_END

  if (yyss + yystacksize - 1 <= yyssp)
#if !defined yyoverflow && !defined YYSTACK_RELOCATE
    goto yyexhaustedlab;
#else
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYPTRDIFF_T yysize = yyssp - yyss + 1;

# if defined yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        yy_state_t *yyss1 = yyss;
        YYSTYPE *yyvs1 = yyvs;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * YYSIZEOF (*yyssp),
                    &yyvs1, yysize * YYSIZEOF (*yyvsp),
                    &yystacksize);
        yyss = yyss1;
        yyvs = yyvs1;
      }
# else /* defined YYSTACK_RELOCATE */
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yy_state_t *yyss1 = yyss;
        union yyalloc *yyptr =
          YY_CAST (union yyalloc *,
                   YYSTACK_ALLOC (YY_CAST (YYSIZE_T, YYSTACK_BYTES (yystacksize))));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
# undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;

      YY_IGNORE_USELESS_CAST_BEGIN
      YYDPRINTF ((stderr, "Stack size increased to %ld\n",
                  YY_CAST (long, yystacksize)));
      YY_IGNORE_USELESS_CAST_END

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }
#endif /* !defined yyoverflow && !defined YYSTACK_RELOCATE */

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;


/*-----------.
| yybackup.  |
`-----------*/
yybackup:
  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex ();
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);
  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  /* Discard the shifted token.  */
  yychar = YYEMPTY;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];


  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {

#line 1428 "grammar/wizuall_parser.c"

      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */
  {
    const int yylhs = yyr1[yyn] - YYNTOKENS;
    const int yyi = yypgoto[yylhs] + *yyssp;
    yystate = (0 <= yyi && yyi <= YYLAST && yycheck[yyi] == *yyssp
               ? yytable[yyi]
               : yydefgoto[yylhs]);
  }

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = YY_CAST (char *, YYSTACK_ALLOC (YY_CAST (YYSIZE_T, yymsg_alloc)));
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }



  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:
  /* Pacify compilers when the user code never invokes YYERROR and the
     label yyerrorlab therefore never appears in user code.  */
  if (0)
    YYERROR;

  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;


      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END


  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;


/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;


#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif


/*-----------------------------------------------------.
| yyreturn -- parsing is finished, return the result.  |
`-----------------------------------------------------*/
yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[+*yyssp], yyvsp);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 162 "grammar/wizuall_parser.y"


/* --- Error Handling --- */
void yyerror(const char *s) {
    fprintf(stderr, "Parse error: %s\n", s);
}


# ======================
# File: grammar\wizuall_parser.h
# ======================

/* A Bison parser, made by GNU Bison 3.5.1.  */

/* Bison interface for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015, 2018-2020 Free Software Foundation,
   Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* Undocumented macros, especially those whose name start with YY_,
   are private implementation details.  Do not rely on them.  */

#ifndef YY_YY_GRAMMAR_WIZUALL_PARSER_H_INCLUDED
# define YY_YY_GRAMMAR_WIZUALL_PARSER_H_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    NUMBER = 258,
    STRING = 259,
    ID = 260,
    IF = 261,
    ELSE = 262,
    WHILE = 263,
    FOR = 264,
    BEGIN_AUX = 265,
    END_AUX = 266,
    SORT = 267,
    REVERSE = 268,
    SLICE = 269,
    AVG = 270,
    TRANSPOSE = 271,
    RUNNING_SUM = 272,
    PAIRWISE_COMPARE = 273,
    PARETO_SET = 274,
    PLOT = 275,
    HISTOGRAM = 276,
    HEATMAP = 277,
    BARCHART = 278,
    PIECHART = 279,
    SCATTER = 280,
    BOXPLOT = 281,
    TIMELINE = 282,
    PLUS = 283,
    MINUS = 284,
    TIMES = 285,
    DIVIDE = 286,
    ASSIGN = 287,
    COMMA = 288,
    SEMICOLON = 289,
    LPAREN = 290,
    RPAREN = 291,
    LBRACE = 292,
    RBRACE = 293,
    LBRACKET = 294,
    RBRACKET = 295
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED
union YYSTYPE
{
#line 14 "grammar/wizuall_parser.y"

    int num;
    char* str;
    struct ASTNode* ast;

#line 104 "grammar/wizuall_parser.h"

};
typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif


extern YYSTYPE yylval;

int yyparse (void);

#endif /* !YY_YY_GRAMMAR_WIZUALL_PARSER_H_INCLUDED  */


# ======================
# File: ir\ast.c
# ======================

ASTNode* createImportNode(const char* filename) {
    ASTNode* node = (ASTNode*)malloc(sizeof(ASTNode));
    node->type = NODE_IMPORT;
    node->import.filename = strdup(filename);
    return node;
} 

# ======================
# File: ir\ast.h
# ======================

#ifndef AST_H
#define AST_H

// Types of AST nodes
typedef enum {
    NODE_PROGRAM,        // New type for the Program (list of statements)
    NODE_ASSIGNMENT,
    NODE_BINARY_OP,
    NODE_VECTOR_LITERAL,
    NODE_NUMBER,
    NODE_ID,
    NODE_STRING,
    NODE_FUNCTION_CALL,
    NODE_VIZ_CALL,
    NODE_IF_ELSE,
    NODE_WHILE_LOOP,
    NODE_FOR_LOOP,
    NODE_AUX_BLOCK,
    NODE_IMPORT
} NodeType;

// Operators for binary expressions
typedef enum {
    OP_PLUS,
    OP_MINUS,
    OP_TIMES,
    OP_DIVIDE,
    OP_ASSIGN,
    OP_LT,
    OP_GT
} BinaryOpType;

// Forward declarations
struct ASTNode;

typedef struct ASTList {
    struct ASTNode* node;
    struct ASTList* next;
} ASTList;

// AST Node structure
typedef struct ASTNode {
    NodeType type;
    union {
        double num_value;  // For numbers
        char* id_name;     // For identifiers

        struct {           // For assignments
            char* var_name;
            struct ASTNode* expr;
        } assignment;

        struct {           // For binary operations
            BinaryOpType op;
            struct ASTNode* left;
            struct ASTNode* right;
        } binary_op;

        struct {           // For vector literals
            ASTList* elements;
        } vector_literal;

        struct {           // For function calls
            char* func_name;
            ASTList* args;
        } function_call;

        struct {           // For visualization calls
            char* viz_func;
            ASTList* args;
        } viz_call;

        struct {           // For if-else
            struct ASTNode* condition;
            ASTList* if_body;
            ASTList* else_body;
        } if_else;

        struct {           // For while loop
            struct ASTNode* condition;
            ASTList* body;
        } while_loop;

        struct {           // For for loop
            struct ASTNode* init;
            struct ASTNode* condition;
            struct ASTNode* increment;
            ASTList* body;
        } for_loop;

        struct {           // For aux blocks
            char* raw_code;
        } aux_block;

        struct {           // For the Program (list of statements)
            ASTList* statements;
        } program;

        struct {           // For import statements
            char* filename;
        } import;

    };
} ASTNode;

// Function declarations
ASTNode* createProgramNode(ASTList* stmts);
ASTNode* createAssignmentNode(char* name, ASTNode* expr);
ASTNode* createBinaryOpNode(BinaryOpType op, ASTNode* left, ASTNode* right);
ASTNode* createVectorNode(ASTList* elements);
ASTNode* createNumberNode(double value);
ASTNode* createIdNode(char* name);
ASTNode* createStringNode(char* value);
ASTNode* createFunctionCallNode(char* name, ASTList* args);
ASTNode* createVizCallNode(char* name, ASTList* args);
ASTNode* createIfElseNode(ASTNode* cond, ASTList* if_body, ASTList* else_body);
ASTNode* createWhileNode(ASTNode* cond, ASTList* body);
ASTNode* createForNode(ASTNode* init, ASTNode* cond, ASTNode* incr, ASTList* body);
ASTNode* createAuxBlockNode(char* code);
ASTNode* createImportNode(const char* filename);

ASTList* createASTList(ASTNode* node);
ASTList* appendASTList(ASTList* list, ASTNode* node);

void printAST(ASTNode* node, int level);

#endif


# ======================
# File: ir\ast_builder.c
# ======================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "ast.h"

// Node creation functions

ASTNode* createProgramNode(ASTList* stmts) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_PROGRAM;
    node->program.statements = stmts;
    return node;
}

ASTNode* createAssignmentNode(char* name, ASTNode* expr) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_ASSIGNMENT;
    node->assignment.var_name = strdup(name);
    node->assignment.expr = expr;
    return node;
}

ASTNode* createBinaryOpNode(BinaryOpType op, ASTNode* left, ASTNode* right) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_BINARY_OP;
    node->binary_op.op = op;
    node->binary_op.left = left;
    node->binary_op.right = right;
    return node;
}

ASTNode* createVectorNode(ASTList* elements) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_VECTOR_LITERAL;
    node->vector_literal.elements = elements;
    return node;
}

ASTNode* createNumberNode(double value) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_NUMBER;
    node->num_value = value;
    return node;
}

ASTNode* createIdNode(char* name) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_ID;
    node->id_name = strdup(name);
    return node;
}

ASTNode* createFunctionCallNode(char* name, ASTList* args) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_FUNCTION_CALL;
    node->function_call.func_name = strdup(name);
    node->function_call.args = args;
    return node;
}

ASTNode* createVizCallNode(char* name, ASTList* args) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_VIZ_CALL;
    node->viz_call.viz_func = strdup(name);
    node->viz_call.args = args;
    return node;
}

ASTNode* createIfElseNode(ASTNode* cond, ASTList* if_body, ASTList* else_body) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_IF_ELSE;
    node->if_else.condition = cond;
    node->if_else.if_body = if_body;
    node->if_else.else_body = else_body;
    return node;
}

ASTNode* createWhileNode(ASTNode* cond, ASTList* body) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_WHILE_LOOP;
    node->while_loop.condition = cond;
    node->while_loop.body = body;
    return node;
}

ASTNode* createForNode(ASTNode* init, ASTNode* cond, ASTNode* incr, ASTList* body) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_FOR_LOOP;
    node->for_loop.init = init;
    node->for_loop.condition = cond;
    node->for_loop.increment = incr;
    node->for_loop.body = body;
    return node;
}

ASTNode* createAuxBlockNode(char* code) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_AUX_BLOCK;
    node->aux_block.raw_code = strdup(code);
    return node;
}

ASTNode* createStringNode(char* value) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_STRING;
    node->id_name = strdup(value); // reuse id_name for string value
    return node;
}

ASTNode* createImportNode(const char* filename) {
    ASTNode* node = malloc(sizeof(ASTNode));
    node->type = NODE_IMPORT;
    node->import.filename = strdup(filename);
    return node;
}

// List creation functions

ASTList* createASTList(ASTNode* node) {
    ASTList* list = malloc(sizeof(ASTList));
    list->node = node;
    list->next = NULL;
    return list;
}

ASTList* appendASTList(ASTList* list, ASTNode* node) {
    if (!list) return createASTList(node);
    ASTList* temp = list;
    while (temp->next) temp = temp->next;
    temp->next = createASTList(node);
    return list;
}

// Debug print function

void printAST(ASTNode* node, int level) {
    if (!node) return;
    for (int i = 0; i < level; i++) printf("  ");

    switch (node->type) {
        case NODE_PROGRAM:
            printf("Program\n");
            for (ASTList* s = node->program.statements; s; s = s->next)
                printAST(s->node, level+1);
            break;
        case NODE_ASSIGNMENT:
            printf("Assignment to %s\n", node->assignment.var_name);
            printAST(node->assignment.expr, level+1);
            break;
        case NODE_BINARY_OP:
            printf("BinaryOp ");
            switch (node->binary_op.op) {
                case OP_PLUS: printf("(+)\n"); break;
                case OP_MINUS: printf("(-)\n"); break;
                case OP_TIMES: printf("(*)\n"); break;
                case OP_DIVIDE: printf("(/)\n"); break;
                case OP_ASSIGN: printf("(=)\n"); break;
                case OP_LT: printf("(<)\n"); break;
                case OP_GT: printf("(>)\n"); break;
                default: printf("(Unknown BinaryOp)\n"); break;
            }
            printAST(node->binary_op.left, level+1);
            printAST(node->binary_op.right, level+1);
            break;
        case NODE_NUMBER:
            printf("Number: %lf\n", node->num_value);
            break;
        case NODE_ID:
            printf("Identifier: %s\n", node->id_name);
            break;
        case NODE_VECTOR_LITERAL:
            printf("VectorLiteral\n");
            for (ASTList* e = node->vector_literal.elements; e; e = e->next)
                printAST(e->node, level+1);
            break;
        case NODE_FUNCTION_CALL:
            printf("FunctionCall: %s\n", node->function_call.func_name);
            for (ASTList* a = node->function_call.args; a; a = a->next)
                printAST(a->node, level+1);
            break;
        case NODE_VIZ_CALL:
            printf("VisualizationCall: %s\n", node->viz_call.viz_func);
            for (ASTList* v = node->viz_call.args; v; v = v->next)
                printAST(v->node, level+1);
            break;
        case NODE_IF_ELSE:
            printf("IfElse\n");
            printAST(node->if_else.condition, level+1);
            printf("IfBody:\n");
            for (ASTList* ifb = node->if_else.if_body; ifb; ifb = ifb->next)
                printAST(ifb->node, level+2);
            printf("ElseBody:\n");
            for (ASTList* elseb = node->if_else.else_body; elseb; elseb = elseb->next)
                printAST(elseb->node, level+2);
            break;
        case NODE_WHILE_LOOP:
            printf("WhileLoop\n");
            printAST(node->while_loop.condition, level+1);
            for (ASTList* wb = node->while_loop.body; wb; wb = wb->next)
                printAST(wb->node, level+2);
            break;
        case NODE_FOR_LOOP:
            printf("ForLoop\n");
            printAST(node->for_loop.init, level+1);
            printAST(node->for_loop.condition, level+1);
            printAST(node->for_loop.increment, level+1);
            for (ASTList* fb = node->for_loop.body; fb; fb = fb->next)
                printAST(fb->node, level+2);
            break;
        case NODE_AUX_BLOCK:
            printf("AuxiliaryCodeBlock\n");
            break;
        default:
            printf("Unknown Node Type\n");
    }
}


# ======================
# File: ir\codegen.c
# ======================

#include "ast.h"
#include <stdio.h>
#include <string.h>
#include <stdbool.h>
#include <libgen.h> // for basename

// Flags for imports and helpers
static bool matplotlib_imported = false;
static bool seaborn_imported = false;
static bool numpy_imported = false;
static bool paretoset_emitted = false;
static bool pairwise_emitted = false;

// Add at the top of the file (after includes):
static int plot_counter = 1;

// Forward declarations
void generate_code(ASTNode* node, FILE* out, int indent);
void generate_expr(ASTNode* node, FILE* out, int indent);
void emit_helpers(FILE* out);
void emit_imports(FILE* out);
void scan_for_imports_and_helpers(ASTNode* node);

void print_indent(FILE* out, int indent) {
    for (int i = 0; i < indent; i++)
        fprintf(out, "    ");
}

// Helper to check if a string matches
bool streq(const char* a, const char* b) {
    return strcmp(a, b) == 0;
}

// Scan AST for needed imports/helpers
void scan_for_imports_and_helpers(ASTNode* node) {
    if (!node) return;
    switch (node->type) {
        case NODE_PROGRAM:
            for (ASTList* s = node->program.statements; s; s = s->next)
                scan_for_imports_and_helpers(s->node);
            break;
        case NODE_VIZ_CALL:
            matplotlib_imported = true;
            if (streq(node->viz_call.viz_func, "heatmap")) seaborn_imported = true;
            break;
        case NODE_FUNCTION_CALL: {
            const char* func = node->function_call.func_name;
            if (streq(func, "runningSum")) numpy_imported = true;
            if (streq(func, "paretoSet")) paretoset_emitted = true;
            if (streq(func, "pairwiseCompare")) pairwise_emitted = true;
            for (ASTList* arg = node->function_call.args; arg; arg = arg->next)
                scan_for_imports_and_helpers(arg->node);
            break;
        }
        case NODE_ASSIGNMENT:
            scan_for_imports_and_helpers(node->assignment.expr);
            break;
        case NODE_BINARY_OP:
            scan_for_imports_and_helpers(node->binary_op.left);
            scan_for_imports_and_helpers(node->binary_op.right);
            break;
        case NODE_VECTOR_LITERAL:
            for (ASTList* e = node->vector_literal.elements; e; e = e->next)
                scan_for_imports_and_helpers(e->node);
            break;
        case NODE_IF_ELSE:
            scan_for_imports_and_helpers(node->if_else.condition);
            for (ASTList* s = node->if_else.if_body; s; s = s->next)
                scan_for_imports_and_helpers(s->node);
            for (ASTList* s = node->if_else.else_body; s; s = s->next)
                scan_for_imports_and_helpers(s->node);
            break;
        case NODE_WHILE_LOOP:
            scan_for_imports_and_helpers(node->while_loop.condition);
            for (ASTList* s = node->while_loop.body; s; s = s->next)
                scan_for_imports_and_helpers(s->node);
            break;
        case NODE_FOR_LOOP:
            scan_for_imports_and_helpers(node->for_loop.init);
            scan_for_imports_and_helpers(node->for_loop.condition);
            scan_for_imports_and_helpers(node->for_loop.increment);
            for (ASTList* s = node->for_loop.body; s; s = s->next)
                scan_for_imports_and_helpers(s->node);
            break;
        case NODE_IMPORT:
            break;
        default:
            break;
    }
}

void emit_imports(FILE* out) {
    // Always suppress matplotlib UserWarnings at the very top
    fprintf(out, "import warnings\nwarnings.filterwarnings(\"ignore\", category=UserWarning, module=\"matplotlib\")\n");
    if (matplotlib_imported) {
        fprintf(out, "import matplotlib.pyplot as plt\n");
    }
    if (numpy_imported) fprintf(out, "import numpy as np\n");
    // Ensure plot_counter is defined before use
    fprintf(out, "plot_counter = 1\n");
    fprintf(out, "import time\n_wizuall_run_id = int(time.time())\n");
}

void emit_helpers(FILE* out) {
    if (pairwise_emitted) {
        fprintf(out, "def pairwise_compare(x):\n    return [x[i+1] - x[i] for i in range(len(x)-1)]\n\n");
    }
    if (paretoset_emitted) {
        fprintf(out, "def pareto_set(x):\n    # Dummy implementation: returns unique values\n    return list(set(x))\n\n");
    }
}

// Helper to emit plt.title, plt.xlabel, plt.ylabel after plot
void emit_labels(ASTList* args, FILE* out, int indent) {
    for (ASTList* a = args; a; a = a->next) {
        ASTNode* n = a->node;
        if (n->type == NODE_BINARY_OP && n->binary_op.op == OP_ASSIGN && n->binary_op.left->type == NODE_ID) {
            const char* key = n->binary_op.left->id_name;
            if (streq(key, "title") || streq(key, "xlabel") || streq(key, "ylabel")) {
                print_indent(out, indent);
                fprintf(out, "plt.%s(", key);
                generate_expr(n->binary_op.right, out, indent);
                fprintf(out, ")\n");
            }
        }
    }
}

// Helper to emit Python for WizuAll built-in functions
void generate_builtin_func(const char* func, ASTList* args, FILE* out, int indent) {
    if (streq(func, "avg")) {
        fprintf(out, "(sum(");
        generate_expr(args->node, out, indent);
        fprintf(out, ") / len(");
        generate_expr(args->node, out, indent);
        fprintf(out, "))");
    } else if (streq(func, "sort")) {
        fprintf(out, "sorted(");
        generate_expr(args->node, out, indent);
        fprintf(out, ")");
    } else if (streq(func, "reverse")) {
        fprintf(out, "list(reversed(");
        generate_expr(args->node, out, indent);
        fprintf(out, "))");
    } else if (streq(func, "slice")) {
        ASTList* a1 = args;
        ASTList* a2 = a1 ? a1->next : NULL;
        ASTList* a3 = a2 ? a2->next : NULL;
        if (a1 && a2 && a3) {
            generate_expr(a1->node, out, indent);
            fprintf(out, "[");
            generate_expr(a2->node, out, indent);
            fprintf(out, ":");
            generate_expr(a3->node, out, indent);
            fprintf(out, "]");
        } else {
            fprintf(out, "# ERROR: slice expects 3 arguments");
        }
    } else if (streq(func, "transpose")) {
        fprintf(out, "list(map(list, zip(*");
        generate_expr(args->node, out, indent);
        fprintf(out, ")))" );
    } else if (streq(func, "runningSum")) {
        fprintf(out, "np.cumsum(");
        generate_expr(args->node, out, indent);
        fprintf(out, ")");
    } else if (streq(func, "pairwiseCompare")) {
        fprintf(out, "pairwise_compare(");
        generate_expr(args->node, out, indent);
        fprintf(out, ")");
    } else if (streq(func, "paretoSet")) {
        fprintf(out, "pareto_set(");
        generate_expr(args->node, out, indent);
        fprintf(out, ")");
    } else {
        fprintf(out, "%s(", func);
        for (ASTList* arg = args; arg; arg = arg->next) {
            generate_expr(arg->node, out, indent);
            if (arg->next) fprintf(out, ", ");
        }
        fprintf(out, ")  # WARNING: unknown function, passed through\n");
    }
}

// Helper to split positional and keyword args for visualizations
void split_viz_args(ASTList* args, ASTNode** pos_args, int* pos_count, ASTNode** kw_keys, ASTNode** kw_vals, int* kw_count) {
    *pos_count = 0;
    *kw_count = 0;
    for (ASTList* a = args; a; a = a->next) {
        ASTNode* n = a->node;
        if (n->type == NODE_BINARY_OP && n->binary_op.op == OP_ASSIGN && n->binary_op.left->type == NODE_ID) {
            kw_keys[*kw_count] = n->binary_op.left;
            kw_vals[*kw_count] = n->binary_op.right;
            (*kw_count)++;
        } else {
            pos_args[*pos_count] = n;
            (*pos_count)++;
        }
    }
}

void generate_viz_call(const char* func, ASTList* args, FILE* out, int indent) {
    // Support up to 10 positional/kw args for simplicity
    ASTNode* pos_args[10]; int pos_count = 0;
    ASTNode* kw_keys[10];  ASTNode* kw_vals[10]; int kw_count = 0;
    split_viz_args(args, pos_args, &pos_count, kw_keys, kw_vals, &kw_count);
    print_indent(out, indent);
    
    // Helper function to generate positional arguments
    void generate_pos_args(int count) {
        for (int i = 0; i < count; ++i) {
            if (i > 0) fprintf(out, ", ");
            generate_expr(pos_args[i], out, indent);
        }
    }
    
    // Helper function to generate keyword arguments
    void generate_kw_args(const char* key, ASTNode* val, bool is_first) {
        if (!is_first) fprintf(out, ", ");
        fprintf(out, "%s=", key);
        generate_expr(val, out, indent);
    }
    
    if (streq(func, "plot")) {
        // Plot visualization with extended parameters
        fprintf(out, "plt.plot(");
        
        // Generate positional arguments first
        generate_pos_args(pos_count);
        
        // Add keyword arguments
        bool has_color = false, has_label = false, has_linestyle = false, 
             has_marker = false, has_markersize = false, has_linewidth = false;
        
        bool first_kw = true;
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title") || streq(key, "xlabel") || streq(key, "ylabel") || 
                streq(key, "grid") || streq(key, "legend")) continue;
            
            if (streq(key, "color")) has_color = true;
            if (streq(key, "label")) has_label = true;
            if (streq(key, "linestyle")) has_linestyle = true;
            if (streq(key, "marker")) has_marker = true;
            if (streq(key, "markersize")) has_markersize = true;
            if (streq(key, "linewidth")) has_linewidth = true;
            
            // Add comma before first keyword arg only if we had positional args
            if (first_kw && pos_count > 0) fprintf(out, ", ");
            generate_kw_args(key, kw_vals[i], first_kw);
            first_kw = false;
        }
        
        // Add default values if not provided
        if (!has_color) {
            if (!first_kw || pos_count > 0) fprintf(out, ", ");
            fprintf(out, "color='blue'");
            first_kw = false;
        }
        if (!has_linestyle) {
            if (!first_kw || pos_count > 0) fprintf(out, ", ");
            fprintf(out, "linestyle='-'");
            first_kw = false;
        }
        if (!has_marker) {
            if (!first_kw || pos_count > 0) fprintf(out, ", ");
            fprintf(out, "marker=''");
            first_kw = false;
        }
        if (!has_markersize) {
            if (!first_kw || pos_count > 0) fprintf(out, ", ");
            fprintf(out, "markersize=5");
            first_kw = false;
        }
        if (!has_linewidth) {
            if (!first_kw || pos_count > 0) fprintf(out, ", ");
            fprintf(out, "linewidth=2");
        }
        
        fprintf(out, ")\n");
        
        // Add title, labels, grid, and legend
        bool has_title = false, has_xlabel = false, has_ylabel = false, has_grid = false, has_legend = false;
        
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title")) {
                has_title = true;
                print_indent(out, indent);
                fprintf(out, "plt.title(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "xlabel")) {
                has_xlabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.xlabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "ylabel")) {
                has_ylabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.ylabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "grid")) {
                has_grid = true;
                print_indent(out, indent);
                fprintf(out, "plt.grid(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "legend")) {
                has_legend = true;
                print_indent(out, indent);
                fprintf(out, "plt.legend(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            }
        }
        
        // Add default values if not provided
        if (!has_title) {
            print_indent(out, indent);
            fprintf(out, "plt.title('Plot')\n");
        }
        if (!has_xlabel) {
            print_indent(out, indent);
            fprintf(out, "plt.xlabel('X-axis')\n");
        }
        if (!has_ylabel) {
            print_indent(out, indent);
            fprintf(out, "plt.ylabel('Y-axis')\n");
        }
        if (!has_grid) {
            print_indent(out, indent);
            fprintf(out, "plt.grid(True)\n");
        }
        if (!has_legend && has_label) {
            print_indent(out, indent);
            fprintf(out, "plt.legend()\n");
        }
        
        print_indent(out, indent);
        fprintf(out, "plt.savefig(f'plots/plot_{_wizuall_run_id}_{plot_counter}.png')\n");
        print_indent(out, indent);
        fprintf(out, "plot_counter += 1\n");
        print_indent(out, indent);
        fprintf(out, "plt.clf()\n");
    } else if (streq(func, "histogram")) {
        // Histogram visualization with extended parameters
        fprintf(out, "plt.hist(");
        
        // Generate positional arguments first
        generate_pos_args(pos_count);
        
        // Add keyword arguments
        bool has_bins = false, has_color = false, has_edgecolor = false, has_density = false;
        
        bool first_kw = true;
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title") || streq(key, "xlabel") || streq(key, "ylabel") || 
                streq(key, "grid")) continue;
            
            if (streq(key, "bins")) has_bins = true;
            if (streq(key, "color")) has_color = true;
            if (streq(key, "edgecolor")) has_edgecolor = true;
            if (streq(key, "density")) has_density = true;
            
            // Add comma before first keyword arg only if we had positional args
            if (first_kw && pos_count > 0) fprintf(out, ", ");
            generate_kw_args(key, kw_vals[i], first_kw);
            first_kw = false;
        }
        
        // Add default values if not provided
        if (!has_bins) {
            if (!first_kw || pos_count > 0) fprintf(out, ", ");
            fprintf(out, "bins=10");
            first_kw = false;
        }
        if (!has_color) {
            if (!first_kw || pos_count > 0) fprintf(out, ", ");
            fprintf(out, "color='skyblue'");
            first_kw = false;
        }
        if (!has_edgecolor) {
            if (!first_kw || pos_count > 0) fprintf(out, ", ");
            fprintf(out, "edgecolor='black'");
            first_kw = false;
        }
        if (!has_density) {
            if (!first_kw || pos_count > 0) fprintf(out, ", ");
            fprintf(out, "density=False");
        }
        
        fprintf(out, ")\n");
        
        // Add title, labels, and grid
        bool has_title = false, has_xlabel = false, has_ylabel = false, has_grid = false;
        
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title")) {
                has_title = true;
                print_indent(out, indent);
                fprintf(out, "plt.title(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "xlabel")) {
                has_xlabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.xlabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "ylabel")) {
                has_ylabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.ylabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "grid")) {
                has_grid = true;
                print_indent(out, indent);
                fprintf(out, "plt.grid(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            }
        }
        
        // Add default values if not provided
        if (!has_title) {
            print_indent(out, indent);
            fprintf(out, "plt.title('Histogram')\n");
        }
        if (!has_xlabel) {
            print_indent(out, indent);
            fprintf(out, "plt.xlabel('Value')\n");
        }
        if (!has_ylabel) {
            print_indent(out, indent);
            fprintf(out, "plt.ylabel('Frequency')\n");
        }
        if (!has_grid) {
            print_indent(out, indent);
            fprintf(out, "plt.grid(True)\n");
        }
        
        print_indent(out, indent);
        fprintf(out, "plt.savefig(f'plots/plot_{_wizuall_run_id}_{plot_counter}.png')\n");
        print_indent(out, indent);
        fprintf(out, "plot_counter += 1\n");
        print_indent(out, indent);
        fprintf(out, "plt.clf()\n");
    } else if (streq(func, "heatmap")) {
        // Heatmap visualization with extended parameters
        fprintf(out, "plt.imshow(");
        
        // Generate positional arguments first
        generate_pos_args(pos_count);
        
        // Add keyword arguments
        bool has_cmap = false, has_interpolation = false, has_aspect = false;
        bool first_kw = true;
        
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title") || streq(key, "xlabel") || streq(key, "ylabel") || 
                streq(key, "colorbar")) continue;
            
            if (streq(key, "cmap")) has_cmap = true;
            if (streq(key, "interpolation")) has_interpolation = true;
            if (streq(key, "aspect")) has_aspect = true;
            
            // Add comma before first keyword arg only if we had positional args
            if (first_kw && pos_count > 0) fprintf(out, ", ");
            generate_kw_args(key, kw_vals[i], first_kw);
            first_kw = false;
        }
        
        // Add default values if not provided
        if (!has_cmap) {
            if (!first_kw || pos_count > 0) fprintf(out, ", ");
            fprintf(out, "cmap='viridis'");
            first_kw = false;
        }
        if (!has_interpolation) {
            if (!first_kw || pos_count > 0) fprintf(out, ", ");
            fprintf(out, "interpolation='nearest'");
            first_kw = false;
        }
        if (!has_aspect) {
            if (!first_kw || pos_count > 0) fprintf(out, ", ");
            fprintf(out, "aspect='auto'");
        }
        
        fprintf(out, ")\n");
        
        // Add title, labels, and colorbar
        bool has_title = false, has_xlabel = false, has_ylabel = false, has_colorbar = false;
        
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title")) {
                has_title = true;
                print_indent(out, indent);
                fprintf(out, "plt.title(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "xlabel")) {
                has_xlabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.xlabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "ylabel")) {
                has_ylabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.ylabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "colorbar")) {
                has_colorbar = true;
                print_indent(out, indent);
                fprintf(out, "plt.colorbar(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            }
        }
        
        // Add default values if not provided
        if (!has_title) {
            print_indent(out, indent);
            fprintf(out, "plt.title('Heatmap')\n");
        }
        if (!has_xlabel) {
            print_indent(out, indent);
            fprintf(out, "plt.xlabel('X-axis')\n");
        }
        if (!has_ylabel) {
            print_indent(out, indent);
            fprintf(out, "plt.ylabel('Y-axis')\n");
        }
        if (!has_colorbar) {
            print_indent(out, indent);
            fprintf(out, "plt.colorbar()\n");
        }
        
        print_indent(out, indent);
        fprintf(out, "plt.savefig(f'plots/plot_{_wizuall_run_id}_{plot_counter}.png')\n");
        print_indent(out, indent);
        fprintf(out, "plot_counter += 1\n");
        print_indent(out, indent);
        fprintf(out, "plt.clf()\n");
    } else if (streq(func, "barchart")) {
        // Bar chart visualization with extended parameters
        fprintf(out, "plt.bar(");
        for (int i = 0; i < pos_count; ++i) {
            if (i > 0) fprintf(out, ", ");
            generate_expr(pos_args[i], out, indent);
        }
        // Only add a comma if there is at least one keyword argument to emit
        bool has_kwarg = false;
        bool has_color = false;
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (!(streq(key, "title") || streq(key, "xlabel") || streq(key, "ylabel") || streq(key, "grid"))) {
                has_kwarg = true;
            }
            if (streq(key, "color")) has_color = true;
        }
        if (has_kwarg) {
            fprintf(out, ", ");
        }
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title") || streq(key, "xlabel") || streq(key, "ylabel") || streq(key, "grid")) continue;
            fprintf(out, "%s=", key);
            generate_expr(kw_vals[i], out, indent);
            if (i < kw_count - 1) fprintf(out, ", ");
        }
        // Add default values if not provided
        if (!has_color) fprintf(out, ", color='orange'");
        fprintf(out, ")\n");
        
        // Add title, labels, and grid
        bool has_title = false, has_xlabel = false, has_ylabel = false, has_grid = false;
        
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title")) {
                has_title = true;
                print_indent(out, indent);
                fprintf(out, "plt.title(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "xlabel")) {
                has_xlabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.xlabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "ylabel")) {
                has_ylabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.ylabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "grid")) {
                has_grid = true;
                print_indent(out, indent);
                fprintf(out, "plt.grid(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            }
        }
        
        // Add default values if not provided
        if (!has_title) {
            print_indent(out, indent);
            fprintf(out, "plt.title('Bar Chart')\n");
        }
        if (!has_xlabel) {
            print_indent(out, indent);
            fprintf(out, "plt.xlabel('Categories')\n");
        }
        if (!has_ylabel) {
            print_indent(out, indent);
            fprintf(out, "plt.ylabel('Values')\n");
        }
        if (!has_grid) {
            print_indent(out, indent);
            fprintf(out, "plt.grid(axis='y')\n");
        }
        
        print_indent(out, indent);
        fprintf(out, "plt.savefig(f'plots/plot_{_wizuall_run_id}_{plot_counter}.png')\n");
        print_indent(out, indent);
        fprintf(out, "plot_counter += 1\n");
        print_indent(out, indent);
        fprintf(out, "plt.clf()\n");
    } else if (streq(func, "piechart")) {
        // Pie chart visualization with only values and labels
        fprintf(out, "plt.pie(");
        for (int i = 0; i < pos_count; ++i) {
            if (i > 0) fprintf(out, ", ");
            generate_expr(pos_args[i], out, indent);
        }
        // Only add a comma if there is at least one keyword argument to emit
        bool has_labels = false;
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "labels")) {
                has_labels = true;
                break;
            }
        }
        if (has_labels && pos_count > 0) fprintf(out, ", ");
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "labels")) {
                fprintf(out, "labels=");
                generate_expr(kw_vals[i], out, indent);
            }
        }
        fprintf(out, ")\n");
        // Add title if provided
        bool has_title = false;
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title")) {
                has_title = true;
                print_indent(out, indent);
                fprintf(out, "plt.title(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            }
        }
        if (!has_title) {
            print_indent(out, indent);
            fprintf(out, "plt.title('Pie Chart')\n");
        }
        print_indent(out, indent);
        fprintf(out, "plt.savefig(f'plots/plot_{_wizuall_run_id}_{plot_counter}.png')\n");
        print_indent(out, indent);
        fprintf(out, "plot_counter += 1\n");
        print_indent(out, indent);
        fprintf(out, "plt.clf()\n");
    } else if (streq(func, "scatter")) {
        // Scatter plot visualization with extended parameters
        fprintf(out, "plt.scatter(");
        for (int i = 0; i < pos_count; ++i) {
            if (i > 0) fprintf(out, ", ");
            generate_expr(pos_args[i], out, indent);
        }
        // Only add a comma if there is at least one keyword argument to emit
        bool has_scatter_kwarg = false;
        bool has_color = false, has_marker = false, has_size = false, has_alpha = false;
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (!(streq(key, "title") || streq(key, "xlabel") || streq(key, "ylabel") || streq(key, "grid"))) {
                has_scatter_kwarg = true;
            }
            if (streq(key, "color")) has_color = true;
            if (streq(key, "marker")) has_marker = true;
            if (streq(key, "s")) has_size = true;
            if (streq(key, "alpha")) has_alpha = true;
        }
        if (has_scatter_kwarg) {
            fprintf(out, ", ");
        }
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title") || streq(key, "xlabel") || streq(key, "ylabel") || streq(key, "grid")) continue;
            fprintf(out, "%s=", key);
            generate_expr(kw_vals[i], out, indent);
            if (i < kw_count - 1) fprintf(out, ", ");
        }
        // Add default values if not provided
        if (!has_color) fprintf(out, ", color='blue'");
        if (!has_marker) fprintf(out, ", marker='o'");
        if (!has_size) fprintf(out, ", s=100");
        if (!has_alpha) fprintf(out, ", alpha=0.6");
        
        fprintf(out, ")\n");
        
        // Add title, labels, and grid
        bool has_title = false, has_xlabel = false, has_ylabel = false, has_grid = false;
        
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title")) {
                has_title = true;
                print_indent(out, indent);
                fprintf(out, "plt.title(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "xlabel")) {
                has_xlabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.xlabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "ylabel")) {
                has_ylabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.ylabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "grid")) {
                has_grid = true;
                print_indent(out, indent);
                fprintf(out, "plt.grid(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            }
        }
        
        // Add default values if not provided
        if (!has_title) {
            print_indent(out, indent);
            fprintf(out, "plt.title('Scatter Plot')\n");
        }
        if (!has_xlabel) {
            print_indent(out, indent);
            fprintf(out, "plt.xlabel('X-axis')\n");
        }
        if (!has_ylabel) {
            print_indent(out, indent);
            fprintf(out, "plt.ylabel('Y-axis')\n");
        }
        if (!has_grid) {
            print_indent(out, indent);
            fprintf(out, "plt.grid(True)\n");
        }
        
        print_indent(out, indent);
        fprintf(out, "plt.savefig(f'plots/plot_{_wizuall_run_id}_{plot_counter}.png')\n");
        print_indent(out, indent);
        fprintf(out, "plot_counter += 1\n");
        print_indent(out, indent);
        fprintf(out, "plt.clf()\n");
    } else if (streq(func, "boxplot")) {
        // Box plot visualization with extended parameters
        fprintf(out, "plt.boxplot(");
        for (int i = 0; i < pos_count; ++i) {
            if (i > 0) fprintf(out, ", ");
            generate_expr(pos_args[i], out, indent);
        }
        // Only add a comma if there is at least one keyword argument to emit
        bool has_boxplot_kwarg = false;
        bool has_notch = false, has_vert = false, has_patch_artist = false, has_tick_labels = false;
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (!(streq(key, "title") || streq(key, "xlabel") || streq(key, "ylabel") || streq(key, "grid"))) {
                has_boxplot_kwarg = true;
            }
            if (streq(key, "notch")) has_notch = true;
            if (streq(key, "vert")) has_vert = true;
            if (streq(key, "patch_artist")) has_patch_artist = true;
            if (streq(key, "tick_labels")) has_tick_labels = true;
        }
        if (has_boxplot_kwarg) {
            fprintf(out, ", ");
        }
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title") || streq(key, "xlabel") || streq(key, "ylabel") || streq(key, "grid")) continue;
            fprintf(out, "%s=", key);
            generate_expr(kw_vals[i], out, indent);
            if (i < kw_count - 1) fprintf(out, ", ");
        }
        // Add default values if not provided
        if (!has_notch) fprintf(out, ", notch=False");
        if (!has_vert) fprintf(out, ", vert=True");
        if (!has_patch_artist) fprintf(out, ", patch_artist=True");
        if (!has_tick_labels) {
            int n_labels = 1;
            if (pos_count > 0 && pos_args[0]->type == NODE_VECTOR_LITERAL) {
                // Count elements in the vector literal
                ASTList* e = pos_args[0]->vector_literal.elements;
                n_labels = 0;
                while (e) {
                    n_labels++;
                    e = e->next;
                }
            } else {
                n_labels = pos_count;
            }
            fprintf(out, ", tick_labels=[");
            for (int i = 0; i < n_labels; ++i) {
                if (i > 0) fprintf(out, ", ");
                fprintf(out, "'Data %d'", i+1);
            }
            fprintf(out, "]");
        }
        fprintf(out, ")\n");
        
        // Add title, labels, and grid
        bool has_title = false, has_xlabel = false, has_ylabel = false, has_grid = false;
        
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title")) {
                has_title = true;
                print_indent(out, indent);
                fprintf(out, "plt.title(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "xlabel")) {
                has_xlabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.xlabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "ylabel")) {
                has_ylabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.ylabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "grid")) {
                has_grid = true;
                print_indent(out, indent);
                fprintf(out, "plt.grid(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            }
        }
        
        // Add default values if not provided
        if (!has_title) {
            print_indent(out, indent);
            fprintf(out, "plt.title('Box Plot')\n");
        }
        if (!has_xlabel) {
            print_indent(out, indent);
            fprintf(out, "plt.xlabel('Groups')\n");
        }
        if (!has_ylabel) {
            print_indent(out, indent);
            fprintf(out, "plt.ylabel('Values')\n");
        }
        if (!has_grid) {
            print_indent(out, indent);
            fprintf(out, "plt.grid(True)\n");
        }
        
        print_indent(out, indent);
        fprintf(out, "plt.savefig(f'plots/plot_{_wizuall_run_id}_{plot_counter}.png')\n");
        print_indent(out, indent);
        fprintf(out, "plot_counter += 1\n");
        print_indent(out, indent);
        fprintf(out, "plt.clf()\n");
    } else if (streq(func, "timeline")) {
        // Timeline visualization with extended parameters
        fprintf(out, "plt.plot(");
        for (int i = 0; i < pos_count; ++i) {
            if (i > 0) fprintf(out, ", ");
            generate_expr(pos_args[i], out, indent);
        }
        
        // Add keyword arguments
        bool has_color = false;
        
        // Add a comma after positional arguments if we have keyword arguments
        if (kw_count > 0) {
            fprintf(out, ", ");
        }
        
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title") || streq(key, "xlabel") || streq(key, "ylabel") || 
                streq(key, "grid") || streq(key, "autofmt_xdate")) continue;
            
            if (streq(key, "color")) has_color = true;
            
            fprintf(out, "%s=", key);
            generate_expr(kw_vals[i], out, indent);
            if (i < kw_count - 1) fprintf(out, ", ");
        }
        
        // Add default values if not provided
        if (!has_color) fprintf(out, ", color='purple'");
        
        fprintf(out, ")\n");
        
        // Add title, labels, grid, and autofmt_xdate
        bool has_title = false, has_xlabel = false, has_ylabel = false, has_grid = false, has_autofmt_xdate = false;
        
        for (int i = 0; i < kw_count; ++i) {
            const char* key = kw_keys[i]->id_name;
            if (streq(key, "title")) {
                has_title = true;
                print_indent(out, indent);
                fprintf(out, "plt.title(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "xlabel")) {
                has_xlabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.xlabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "ylabel")) {
                has_ylabel = true;
                print_indent(out, indent);
                fprintf(out, "plt.ylabel(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "grid")) {
                has_grid = true;
                print_indent(out, indent);
                fprintf(out, "plt.grid(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            } else if (streq(key, "autofmt_xdate")) {
                has_autofmt_xdate = true;
                print_indent(out, indent);
                fprintf(out, "plt.gcf().autofmt_xdate(");
                generate_expr(kw_vals[i], out, indent);
                fprintf(out, ")\n");
            }
        }
        
        // Add default values if not provided
        if (!has_title) {
            print_indent(out, indent);
            fprintf(out, "plt.title('Timeline')\n");
        }
        if (!has_xlabel) {
            print_indent(out, indent);
            fprintf(out, "plt.xlabel('Date')\n");
        }
        if (!has_ylabel) {
            print_indent(out, indent);
            fprintf(out, "plt.ylabel('Value')\n");
        }
        if (!has_grid) {
            print_indent(out, indent);
            fprintf(out, "plt.grid(True)\n");
        }
        if (!has_autofmt_xdate) {
            print_indent(out, indent);
            fprintf(out, "plt.gcf().autofmt_xdate()\n");
        }
        
        print_indent(out, indent);
        fprintf(out, "plt.savefig(f'plots/plot_{_wizuall_run_id}_{plot_counter}.png')\n");
        print_indent(out, indent);
        fprintf(out, "plot_counter += 1\n");
        print_indent(out, indent);
        fprintf(out, "plt.clf()\n");
    } else {
        fprintf(out, "# Unknown visualization: %s\n", func);
    }
}

void generate_expr(ASTNode* node, FILE* out, int indent) {
    if (!node) return;
    switch (node->type) {
        case NODE_NUMBER:
            fprintf(out, "%.15g", node->num_value);
            break;
        case NODE_ID:
            fprintf(out, "%s", node->id_name);
            break;
        case NODE_STRING:
            fprintf(out, "%s", node->id_name); // Already quoted in lexer
            break;
        case NODE_VECTOR_LITERAL: {
            fprintf(out, "[");
            ASTList* e = node->vector_literal.elements;
            while (e) {
                generate_expr(e->node, out, indent);
                if (e->next) fprintf(out, ", ");
                e = e->next;
            }
            fprintf(out, "]");
            break;
        }
        case NODE_BINARY_OP:
            generate_expr(node->binary_op.left, out, indent);
            switch (node->binary_op.op) {
                case OP_PLUS: fprintf(out, " + "); break;
                case OP_MINUS: fprintf(out, " - "); break;
                case OP_TIMES: fprintf(out, " * "); break;
                case OP_DIVIDE: fprintf(out, " / "); break;
                case OP_LT: fprintf(out, " < "); break;
                case OP_GT: fprintf(out, " > "); break;
                case OP_ASSIGN: fprintf(out, " = "); break;
                default: fprintf(out, " ? "); break;
            }
            generate_expr(node->binary_op.right, out, indent);
            break;
        case NODE_FUNCTION_CALL: {
            const char* func = node->function_call.func_name;
            if (streq(func, "avg") || streq(func, "sort") || streq(func, "reverse") || streq(func, "slice") || streq(func, "transpose") || streq(func, "runningSum") || streq(func, "pairwiseCompare") || streq(func, "paretoSet")) {
                generate_builtin_func(func, node->function_call.args, out, indent);
            } else {
                fprintf(out, "%s(", func);
                for (ASTList* arg = node->function_call.args; arg; arg = arg->next) {
                    generate_expr(arg->node, out, indent);
                    if (arg->next) fprintf(out, ", ");
                }
                fprintf(out, ")");
            }
            break;
        }
        default:
            fprintf(out, "/* unsupported expr */");
    }
}

void generate_code(ASTNode* node, FILE* out, int indent) {
    if (!node) return;
    switch (node->type) {
        case NODE_PROGRAM:
            scan_for_imports_and_helpers(node);
            emit_imports(out);
            emit_helpers(out);
            // Add code to create 'plots' directory if it doesn't exist
            fprintf(out, "import os\n");
            fprintf(out, "os.makedirs('plots', exist_ok=True)\n");
            for (ASTList* s = node->program.statements; s; s = s->next)
                generate_code(s->node, out, indent);
            break;
        case NODE_ASSIGNMENT:
            print_indent(out, indent);
            fprintf(out, "%s = ", node->assignment.var_name);
            generate_expr(node->assignment.expr, out, indent);
            fprintf(out, "\n");
            break;
        case NODE_FUNCTION_CALL:
            print_indent(out, indent);
            generate_expr(node, out, indent);
            fprintf(out, "\n");
            break;
        case NODE_VIZ_CALL:
            generate_viz_call(node->viz_call.viz_func, node->viz_call.args, out, indent);
            break;
        case NODE_IF_ELSE:
            print_indent(out, indent);
            fprintf(out, "if ");
            generate_expr(node->if_else.condition, out, indent);
            fprintf(out, ":\n");
            for (ASTList* s = node->if_else.if_body; s; s = s->next)
                generate_code(s->node, out, indent + 1);
            print_indent(out, indent);
            fprintf(out, "else:\n");
            for (ASTList* s = node->if_else.else_body; s; s = s->next)
                generate_code(s->node, out, indent + 1);
            break;
        case NODE_WHILE_LOOP:
            print_indent(out, indent);
            fprintf(out, "while ");
            generate_expr(node->while_loop.condition, out, indent);
            fprintf(out, ":\n");
            for (ASTList* s = node->while_loop.body; s; s = s->next)
                generate_code(s->node, out, indent + 1);
            break;
        case NODE_FOR_LOOP:
            print_indent(out, indent);
            generate_code(node->for_loop.init, out, indent);
            print_indent(out, indent);
            fprintf(out, "while ");
            generate_expr(node->for_loop.condition, out, indent);
            fprintf(out, ":\n");
            for (ASTList* s = node->for_loop.body; s; s = s->next)
                generate_code(s->node, out, indent + 1);
            generate_code(node->for_loop.increment, out, indent + 1);
            break;
        case NODE_IMPORT: {
            // Emit Python code to import data from JSON or CSV
            const char* fname = node->import.filename;
            int len = strlen(fname);
            // Remove quotes if present
            char clean_fname[256];
            if (fname[0] == '"' && fname[len-1] == '"') {
                strncpy(clean_fname, fname+1, len-2);
                clean_fname[len-2] = '\0';
            } else {
                strncpy(clean_fname, fname, sizeof(clean_fname)-1);
                clean_fname[sizeof(clean_fname)-1] = '\0';
            }
            if (len > 5 && strcmp(clean_fname + strlen(clean_fname) - 5, ".json") == 0) {
                print_indent(out, indent);
                fprintf(out, "import json\n");
                print_indent(out, indent);
                fprintf(out, "with open('%s', 'r') as f:\n", clean_fname);
                print_indent(out, indent+1);
                fprintf(out, "_data = json.load(f)\n");
                print_indent(out, indent+1);
                fprintf(out, "globals().update(_data)\n");
            } else if (len > 4 && strcmp(clean_fname + strlen(clean_fname) - 4, ".csv") == 0) {
                print_indent(out, indent);
                fprintf(out, "import csv\n");
                print_indent(out, indent);
                fprintf(out, "with open('%s', 'r') as f:\n", clean_fname);
                print_indent(out, indent+1);
                fprintf(out, "reader = csv.DictReader(f)\n");
                print_indent(out, indent+1);
                fprintf(out, "_csv_data = list(reader)\n");
                print_indent(out, indent+1);
                fprintf(out, "if _csv_data:\n");
                print_indent(out, indent+2);
                fprintf(out, "for k in _csv_data[0].keys():\n");
                print_indent(out, indent+3);
                fprintf(out, "globals()[k] = [row[k] for row in _csv_data]\n");
            } else {
                print_indent(out, indent);
                fprintf(out, "# Unsupported import file type: %s\n", fname);
            }
            break;
        }
        default:
            print_indent(out, indent);
            fprintf(out, "# unsupported node\n");
    }
} 

# ======================
# File: ir\codegen.h
# ======================

#ifndef CODEGEN_H
#define CODEGEN_H
#include "ast.h"
#include <stdio.h>
void generate_code(ASTNode* node, FILE* out, int indent);
#endif 

# ======================
# File: ir\semantic_checks.c
# ======================



# ======================
# File: ir\symbol_table.c
# ======================



# ======================
# File: lexer\lex.yy.c
# ======================

#line 2 "lexer/lex.yy.c"

#line 4 "lexer/lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = NULL; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = NULL;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart ( FILE *input_file  );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size  );
void yy_delete_buffer ( YY_BUFFER_STATE b  );
void yy_flush_buffer ( YY_BUFFER_STATE b  );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state ( void );

static void yyensure_buffer_stack ( void );
static void yy_load_buffer_state ( void );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file  );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size  );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len  );

void *yyalloc ( yy_size_t  );
void *yyrealloc ( void *, yy_size_t  );
void yyfree ( void *  );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */
typedef flex_uint8_t YY_CHAR;

FILE *yyin = NULL, *yyout = NULL;

typedef int yy_state_type;

extern int yylineno;
int yylineno = 1;

extern char *yytext;
#ifdef yytext_ptr
#undef yytext_ptr
#endif
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state ( void );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  );
static int yy_get_next_buffer ( void );
static void yynoreturn yy_fatal_error ( const char* msg  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;
#define YY_NUM_RULES 40
#define YY_END_OF_BUFFER 41
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[121] =
    {   0,
        0,    0,   41,   39,    4,    2,    3,   39,   29,   30,
       24,   22,   27,   23,   25,   20,   28,   35,   26,   36,
       19,   19,   19,   33,   34,   19,   19,   19,   19,   19,
       19,   19,   19,   31,   32,    4,   37,    1,    0,   21,
        0,   38,    0,   20,   19,   19,   19,   19,   19,   19,
       19,   19,   19,    5,   19,   19,   19,   19,   19,   38,
       20,   19,   19,   19,   19,   19,    8,   19,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   19,    6,   19,
       19,   19,   19,   12,   19,   19,   19,   19,   19,   19,
       19,   19,   19,   19,   19,    7,   19,   19,   19,   19,

       19,   19,   11,   19,   19,   19,   10,   19,   18,   14,
       19,   19,   17,   19,   15,   19,   16,    9,   13,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    1,    5,    1,    1,    1,    1,    1,    6,
        7,    8,    9,   10,   11,   12,   13,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,    1,   15,   16,
       17,   18,    1,    1,   19,   20,   21,   22,   23,   21,
       24,   21,   25,   21,   21,   21,   21,   26,   21,   21,
       21,   21,   21,   21,   27,   21,   21,   28,   21,   21,
       29,   30,   31,    1,   32,    1,   33,   34,   35,   21,

       36,   37,   38,   39,   40,   21,   21,   41,   42,   21,
       43,   44,   21,   45,   46,   47,   21,   21,   48,   49,
       21,   21,   50,    1,   51,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[52] =
    {   0,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    3,    1,    1,    1,    1,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    1,    1,
        1,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    1,
        1
    } ;

static const flex_int16_t yy_base[124] =
    {   0,
        0,    0,  160,  161,   50,   53,   56,   56,  161,  161,
      161,  161,  161,  161,  146,   50,  161,  161,  161,  161,
        0,  135,  131,  161,  161,   30,  115,  112,   29,   29,
       27,  119,  114,  161,  161,   72,   75,   78,   65,  161,
      149,    0,  137,   71,    0,  126,  127,  103,   98,  100,
      100,  111,   97,    0,   98,  105,   97,  106,   98,    0,
      123,  111,  103,   99,   89,   96,    0,   84,   83,   86,
       93,   80,   79,   84,   98,  104,   83,   80,    0,   78,
       76,   73,   78,    0,   69,   79,   82,   86,   79,   68,
       77,   71,   61,   74,   70,    0,   86,   76,   58,   55,

       56,   49,    0,   48,   47,   64,    0,   43,    0,    0,
       56,   41,    0,   59,    0,   42,    0,    0,    0,  161,
       95,   69,   98
    } ;

static const flex_int16_t yy_def[124] =
    {   0,
      120,    1,  120,  120,  120,  120,  120,  121,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      122,  122,  122,  120,  120,  122,  122,  122,  122,  122,
      122,  122,  122,  120,  120,  120,  120,  120,  121,  120,
      121,  123,  120,  120,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  123,
      120,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,

      122,  122,  122,  122,  122,  122,  122,  122,  122,  122,
      122,  122,  122,  122,  122,  122,  122,  122,  122,    0,
      120,  120,  120
    } ;

static const flex_int16_t yy_nxt[213] =
    {   0,
        4,    5,    6,    7,    8,    9,   10,   11,   12,   13,
       14,    4,   15,   16,   17,   18,   19,   20,   21,   22,
       21,   21,   23,   21,   21,   21,   21,   21,   24,    4,
       25,   21,   21,   26,   21,   27,   28,   21,   29,   30,
       21,   21,   21,   31,   21,   32,   21,   33,   21,   34,
       35,   36,   37,   37,   37,   37,   37,   37,   38,   37,
       40,   43,   48,   44,   52,   54,   56,   57,   53,   40,
       55,   45,   49,   36,   37,   37,   37,   37,   37,   37,
       37,   37,   43,  119,   44,   41,  118,  117,  116,  115,
      114,  113,  112,  111,   41,   39,   39,   39,   60,  110,

       60,  109,  108,  107,  106,  105,  104,  103,  102,  101,
      100,   99,   98,   97,   96,   95,   94,   93,   92,   91,
       90,   89,   88,   87,   86,   85,   84,   83,   82,   81,
       80,   79,   78,   77,   76,   75,   61,   74,   73,   72,
       71,   70,   69,   68,   67,   66,   65,   64,   63,   62,
       61,  120,   59,   58,   51,   50,   47,   46,   42,  120,
        3,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120
    } ;

static const flex_int16_t yy_chk[213] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    5,    5,    6,    6,    6,    7,    7,    7,
        8,   16,   26,   16,   29,   30,   31,   31,   29,   39,
       30,  122,   26,   36,   36,   36,   37,   37,   37,   38,
       38,   38,   44,  116,   44,    8,  114,  112,  111,  108,
      106,  105,  104,  102,   39,  121,  121,  121,  123,  101,

      123,  100,   99,   98,   97,   95,   94,   93,   92,   91,
       90,   89,   88,   87,   86,   85,   83,   82,   81,   80,
       78,   77,   76,   75,   74,   73,   72,   71,   70,   69,
       68,   66,   65,   64,   63,   62,   61,   59,   58,   57,
       56,   55,   53,   52,   51,   50,   49,   48,   47,   46,
       43,   41,   33,   32,   28,   27,   23,   22,   15,    3,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,

      120,  120,  120,  120,  120,  120,  120,  120,  120,  120,
      120,  120
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lexer/wizuall_lexer.l"
#line 2 "lexer/wizuall_lexer.l"
#include "../wizuall_parser.tab.h"

#include <string.h>
#include <stdlib.h>

// Declare yylval properly
extern YYSTYPE yylval;

// Add line and column tracking

int yycolumn = 1;
#line 543 "lexer/lex.yy.c"
#line 544 "lexer/lex.yy.c"

#define INITIAL 0

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals ( void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( void );

int yyget_debug ( void );

void yyset_debug ( int debug_flag  );

YY_EXTRA_TYPE yyget_extra ( void );

void yyset_extra ( YY_EXTRA_TYPE user_defined  );

FILE *yyget_in ( void );

void yyset_in  ( FILE * _in_str  );

FILE *yyget_out ( void );

void yyset_out  ( FILE * _out_str  );

			int yyget_leng ( void );

char *yyget_text ( void );

int yyget_lineno ( void );

void yyset_lineno ( int _line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( void );
#else
extern int yywrap ( void );
#endif
#endif

#ifndef YY_NO_UNPUT
    
    static void yyunput ( int c, char *buf_ptr  );
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * );
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( void );
#else
static int input ( void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    
	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE );
		}

		yy_load_buffer_state(  );
		}

	{
#line 21 "lexer/wizuall_lexer.l"


#line 764 "lexer/lex.yy.c"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 121 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 161 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 23 "lexer/wizuall_lexer.l"
{ yylineno++; yycolumn = 1; }
	YY_BREAK
case 2:
/* rule 2 can match eol */
YY_RULE_SETUP
#line 24 "lexer/wizuall_lexer.l"
{ yylineno++; yycolumn = 1; }
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 25 "lexer/wizuall_lexer.l"
{ yylineno++; yycolumn = 1; }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 26 "lexer/wizuall_lexer.l"
{ yycolumn += yyleng; }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 28 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return IF; }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 29 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return ELSE; }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 30 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return WHILE; }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 31 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return FOR; }
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 32 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return BEGIN_AUX; }
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 33 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return END_AUX; }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 34 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return IMPORT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 36 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return PLOT; }
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 37 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return HISTOGRAM; }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 38 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return HEATMAP; }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 39 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return BARCHART; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 40 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return PIECHART; }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 41 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return SCATTER; }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 42 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return BOXPLOT; }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 44 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return ID; }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 45 "lexer/wizuall_lexer.l"
{ yylval.num = atof(yytext); yycolumn += yyleng; return NUMBER; }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 46 "lexer/wizuall_lexer.l"
{
    int i;
    for (i = 0; i < yyleng; i++) {
        if (yytext[i] == '\n') {
            yylineno++;
            yycolumn = 1;
        } else if (yytext[i] == '\r') {
            if (i+1 < yyleng && yytext[i+1] == '\n') {
                i++;
            }
            yylineno++;
            yycolumn = 1;
        } else {
            yycolumn++;
        }
    }
    yylval.str = strdup(yytext);
    return STRING;
}
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return PLUS; }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return MINUS; }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return TIMES; }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return DIVIDE; }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 70 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return ASSIGN; }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 71 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return COMMA; }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 72 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return SEMICOLON; }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 73 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return LPAREN; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 74 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return RPAREN; }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 75 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return LBRACE; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 76 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return RBRACE; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 77 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return LBRACKET; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 78 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return RBRACKET; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 79 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return LT; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 80 "lexer/wizuall_lexer.l"
{ yylval.str = strdup(yytext); yycolumn += yyleng; return GT; }
	YY_BREAK
case 37:
/* rule 37 can match eol */
YY_RULE_SETUP
#line 82 "lexer/wizuall_lexer.l"
;         
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 83 "lexer/wizuall_lexer.l"
{
    int i;
    for (i = 0; i < yyleng; i++) {
        if (yytext[i] == '\n') {
            yylineno++;
            yycolumn = 1;
        } else if (yytext[i] == '\r') {
            if (i+1 < yyleng && yytext[i+1] == '\n') {
                i++;
            }
            yylineno++;
            yycolumn = 1;
        } else {
            yycolumn++;
        }
    }
    /* skip comment */
}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 102 "lexer/wizuall_lexer.l"
{
    int i;
    for (i = 0; i < yyleng; i++) {
        if (yytext[i] == '\n') {
            yylineno++;
            yycolumn = 1;
        } else if (yytext[i] == '\r') {
            if (i+1 < yyleng && yytext[i+1] == '\n') {
                i++;
            }
            yylineno++;
            yycolumn = 1;
        } else {
            yycolumn++;
        }
    }
    /* Skip any unknown single characters */
}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 121 "lexer/wizuall_lexer.l"
ECHO;
	YY_BREAK
#line 1077 "lexer/lex.yy.c"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap(  ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = (yytext_ptr);
	int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr) - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2)  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if (((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 121 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	int yy_is_jam;
    	char *yy_cp = (yy_c_buf_p);

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 121 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 120);

		return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

    static void yyunput (int c, char * yy_bp )
{
	char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		int number_to_move = (yy_n_chars) + 2;
		char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = (int) YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (int) ((yy_c_buf_p) - (yytext_ptr));
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap(  ) )
						return 0;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE );
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file );
	yy_load_buffer_state(  );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state(  );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2)  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf  );

	yyfree( (void *) b  );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state(  );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state(  );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state(  );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	yy_size_t num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr )
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg )
{
			fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
    
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param _line_number line number
 * 
 */
void yyset_lineno (int  _line_number )
{
    
    yylineno = _line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str )
{
        yyin = _in_str ;
}

void yyset_out (FILE *  _out_str )
{
        yyout = _out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  _bdebug )
{
        yy_flex_debug = _bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = NULL;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = NULL;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n )
{
		
	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s )
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
			return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
		
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr )
{
			free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 121 "lexer/wizuall_lexer.l"


int yywrap() {
    return 1;
}   



# ======================
# File: ReportChunks\lex_parse.md
# ======================

Absolutely! Here is a **deep-dive, technical, implementation-focused report** on the lexer and parser for your WizuAll compiler, with explicit details, rationale, and code-level design decisions.

---

# WizuAll Compiler: Lexer and Parser Implementation – Technical Report

---

## 1. Lexer (Flex) – Implementation Details

### 1.1. Token Specification

- **Keywords:**  
  Defined as reserved words in the `.l` file, e.g.:
  ```
  "if"        return IF;
  "else"      return ELSE;
  "while"     return WHILE;
  "for"       return FOR;
  "plot"      return PLOT;
  // ... and all visualization and built-in function names
  ```
  These are mapped to unique token types in the parser.

- **Identifiers:**  
  ```
  [a-zA-Z_][a-zA-Z0-9_]*    { yylval.str = strdup(yytext); return ID; }
  ```
  - All variable and function names are case-sensitive.
  - The value is stored in `yylval.str` for use in the parser.

- **Numbers:**  
  ```
  [0-9]+(\.[0-9]+)?         { yylval.num = atof(yytext); return NUMBER; }
  ```
  - Both integers and floating-point numbers are supported.
  - All numbers are parsed as `double` for downstream uniformity.

- **Strings:**  
  ```
  \"([^\\\"]|\\.)*\"        { yylval.str = strdup(yytext); return STRING; }
  ```
  - Double-quoted strings, with support for escaped quotes and characters.

- **Operators and Delimiters:**  
  Each operator and delimiter is mapped to a unique token, e.g.:
  ```
  "=="    return EQ;
  "!="    return NEQ;
  "<="    return LEQ;
  ">="    return GEQ;
  "="     return ASSIGN;
  "+"     return PLUS;
  "-"     return MINUS;
  "*"     return TIMES;
  "/"     return DIVIDE;
  "("     return LPAREN;
  ")"     return RPAREN;
  "["     return LBRACKET;
  "]"     return RBRACKET;
  "{"     return LBRACE;
  "}"     return RBRACE;
  ","     return COMMA;
  ";"     return SEMICOLON;
  ```

### 1.2. Comments and Whitespace

- **Comments:**  
  ```
  "//".*    /* skip single-line comments */
  ```
  - Entire line is ignored.

- **Whitespace:**  
  ```
  [ \t\r\n]+    /* skip whitespace, but update line/column counters */
  ```
  - Whitespace is ignored, but line numbers are incremented for error reporting.

### 1.3. Error Handling

- Any unrecognized character triggers:
  ```
  .    { fprintf(stderr, "Illegal character '%c' at line %d\n", yytext[0], yylineno); exit(1); }
  ```
  - Immediate termination with a clear error message.

### 1.4. Token Value Passing

- Uses a `%union` in the Bison file to allow `yylval` to carry either `double` (for numbers) or `char*` (for identifiers/strings).
- All tokens that carry values (ID, NUMBER, STRING) set `yylval` appropriately.

### 1.5. Integration

- The lexer is compiled to `lex.yy.c` and linked with the parser.
- The lexer only returns tokens; all structure-building is deferred to the parser.

---

## 2. Parser (Bison) – Implementation Details

### 2.1. Grammar Structure

- **Start Symbol:**  
  ```
  Program : StatementList
  ```
  - The root of the AST is a program node containing a list of statements.

- **Statements:**  
  ```
  Statement
      : Assignment SEMICOLON
      | FunctionCall SEMICOLON
      | VisualizationCall SEMICOLON
      | ControlStructure
      ;
  ```
  - Each statement is parsed and added to the AST.

- **Assignment:**  
  ```
  Assignment : ID ASSIGN Expression
  ```
  - Produces an AST node with the variable name and the expression subtree.

- **Expressions:**  
  - Arithmetic, logical, and comparison expressions are handled with precedence and associativity rules.
  - Example:
    ```
    Expression
        : Expression PLUS Expression
        | Expression MINUS Expression
        | Expression TIMES Expression
        | Expression DIVIDE Expression
        | LPAREN Expression RPAREN
        | NUMBER
        | ID
        | FunctionCall
        | VectorLiteral
        | MatrixLiteral
        ;
    ```
  - Each operation creates a binary or unary AST node.

- **Function Calls:**  
  ```
  FunctionCall : ID LPAREN ArgListOpt RPAREN
  ```
  - `ArgListOpt` allows for zero or more arguments.
  - Arguments are parsed as a linked list of AST nodes.

- **Visualization Calls:**  
  ```
  VisualizationCall : VizFuncName LPAREN VizArgListOpt RPAREN
  ```
  - `VizFuncName` is a set of reserved words (plot, histogram, etc.).
  - `VizArgListOpt` supports both positional and keyword arguments.

- **Vectors and Matrices:**  
  ```
  VectorLiteral : LBRACKET ExprList RBRACKET
  MatrixLiteral : LBRACKET VectorList RBRACKET
  ```
  - Vectors are lists of expressions.
  - Matrices are lists of vectors.

- **Control Structures:**  
  - **If-Else:**
    ```
    IfElse : IF LPAREN Expression RPAREN LBRACE StatementList RBRACE ELSE LBRACE StatementList RBRACE
    ```
  - **While:**
    ```
    While : WHILE LPAREN Expression RPAREN LBRACE StatementList RBRACE
    ```
  - **For:**
    ```
    For : FOR LPAREN Assignment SEMICOLON Expression SEMICOLON Assignment RPAREN LBRACE StatementList RBRACE
    ```
  - Each control structure creates a corresponding AST node with condition and body subtrees.

### 2.2. AST Construction

- **Node Types:**  
  - Each grammar rule’s semantic action allocates and populates a C struct representing an AST node.
  - Node types include: PROGRAM, ASSIGNMENT, FUNCTION_CALL, VIZ_CALL, IF_ELSE, WHILE_LOOP, FOR_LOOP, VECTOR_LITERAL, MATRIX_LITERAL, NUMBER, ID, STRING, BINARY_OP, etc.

- **Memory Management:**  
  - All AST nodes are heap-allocated.
  - Linked lists are used for argument and statement lists.

- **Type Information:**  
  - Each node carries type information (e.g., number, vector, matrix, string) for semantic checks and code generation.

### 2.3. Error Handling

- **Syntax Errors:**  
  - The parser uses Bison’s error token to recover from errors and continue parsing, allowing multiple errors to be reported in one run.
  - Custom error messages include line and column numbers.

- **Semantic Checks:**  
  - Some semantic checks (e.g., correct number of function arguments) are performed in the parser; others are deferred to later passes.

### 2.4. Operator Precedence and Associativity

- Precedence is declared in the Bison file:
  ```
  %left PLUS MINUS
  %left TIMES DIVIDE
  %left EQ NEQ LT GT LEQ GEQ
  ```
  - This ensures correct parsing of expressions like `a + b * c`.

### 2.5. Extensibility

- **Adding New Functions/Visualizations:**  
  - To add a new function, add its keyword to the lexer, its grammar rule to the parser, and its code generation logic to the backend.
  - The grammar is modular, so new constructs can be added with minimal changes.

### 2.6. Integration with Code Generation

- After parsing, the AST is passed to the code generation module.
- The parser does not generate code directly; it only builds the AST.

### 2.7. AST Printing

- After parsing, a recursive function traverses the AST and prints its structure to the terminal for debugging and verification.

---

## 3. Notable Implementation Decisions

- **All numbers as double:**  
  - Ensures consistency and avoids type errors in mathematical and plotting operations.
- **Keyword arguments for visualizations:**  
  - Enables flexible, Pythonic syntax for plots.
- **AST-based design:**  
  - Decouples parsing from code generation, making the compiler easier to maintain and extend.
- **Error recovery:**  
  - Parser attempts to recover from errors to provide a better user experience.
- **Line/column tracking:**  
  - Lexer and parser both track line/column for precise error messages.

---

## 4. Example: Parsing a Visualization Call

Given:
```wzl
plot(x, y, title="Line Plot", xlabel="X Axis", ylabel="Y Axis");
```

- **Lexer output:**  
  `PLOT LPAREN ID COMMA ID COMMA ID ASSIGN STRING COMMA ID ASSIGN STRING COMMA ID ASSIGN STRING RPAREN SEMICOLON`
- **Parser actions:**  
  - Recognizes as a `VisualizationCall`.
  - Builds a VIZ_CALL AST node with:
    - Function: `plot`
    - Positional args: `x`, `y`
    - Keyword args: `title="Line Plot"`, `xlabel="X Axis"`, `ylabel="Y Axis"`

---

## 5. Code Snippet: AST Node for Assignment

```c
typedef struct {
    char* var_name;
    ASTNode* expr;
} AssignmentNode;
```
- Created in the semantic action for `Assignment : ID ASSIGN Expression`.

---

## 6. Summary Table

| Component | Tool   | Key Features/Choices |
|-----------|--------|---------------------|
| Lexer     | Flex   | Regex-based, double support, error handling, line/col tracking |
| Parser    | Bison  | LALR(1) grammar, AST construction, operator precedence, error recovery, extensibility |

---

## 7. Conclusion

The WizuAll lexer and parser are engineered for robustness, extensibility, and clarity. The design choices—such as full floating-point support, AST-based architecture, and detailed error reporting—enable a powerful and user-friendly DSL for data analysis and visualization.

---

If you want actual code excerpts, a sample AST printout, or a diagram of the AST structure, just ask!


# ======================
# File: ReportChunks\SyntaxDoc.md
# ======================

Here is a clear and organized syntax documentation for your WizuAll language, split into two sections:

---

# WizuAll Syntax Documentation

---

## 1. Non-Visualization Functions

### **Variable Assignment**
```wzl
variable = value;
```
- Assigns a value (number, vector, matrix, or function result) to a variable.

### **Vectors and Matrices**
```wzl
v = [1, 2, 3, 4];
m = [
    [1, 2],
    [3, 4]
];
```
- Square brackets `[]` for vectors.
- Nested brackets for matrices.

### **Built-in Functions**

#### **avg**
```wzl
result = avg(vector);
```
- Returns the average of the elements in `vector`.

#### **sort**
```wzl
result = sort(vector);
```
- Returns a sorted version of `vector`.

#### **reverse**
```wzl
result = reverse(vector);
```
- Returns a reversed version of `vector`.

#### **slice**
```wzl
result = slice(vector, start, end);
```
- Returns a subvector from `start` (inclusive) to `end` (exclusive).

#### **transpose**
```wzl
result = transpose(matrix);
```
- Returns the transpose of a matrix.

#### **runningSum**
```wzl
result = runningSum(vector);
```
- Returns the cumulative sum of the vector.

#### **pairwiseCompare**
```wzl
result = pairwiseCompare(vector);
```
- Returns a vector of differences between consecutive elements.

#### **paretoSet**
```wzl
result = paretoSet(vector);
```
- Returns the set of unique elements in the vector.

### **Print**
```wzl
print("message", variable, ...);
```
- Prints messages and/or variable values to the terminal.

### **Control Structures**

#### **If-Else**
```wzl
if (condition) {
    // statements
} else {
    // statements
}
```

#### **While Loop**
```wzl
while (condition) {
    // statements
}
```

#### **For Loop**
```wzl
for (i = start; i <= end; i = i + 1) {
    // statements
}
```

---

## 2. Visualization Functions

**The following syntax and options are based on your `examples/test.wzl` file.**

### **Line Plot**
```wzl
plot(x, y, title="Line Plot", xlabel="X Axis", ylabel="Y Axis");
```
- **x, y:** Vectors of data.
- **title:** (optional) Plot title.
- **xlabel:** (optional) X-axis label.
- **ylabel:** (optional) Y-axis label.

---

### **Histogram**
```wzl
histogram(y, title="Histogram Example", xlabel="Value", ylabel="Frequency");
```
- **y:** Vector of data.
- **title:** (optional) Plot title.
- **xlabel:** (optional) X-axis label.
- **ylabel:** (optional) Y-axis label.

---

### **Heatmap**
```wzl
matrix = [
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
];
heatmap(matrix, title="Heatmap Example", xlabel="X", ylabel="Y");
```
- **matrix:** 2D array of data.
- **title:** (optional) Plot title.
- **xlabel:** (optional) X-axis label.
- **ylabel:** (optional) Y-axis label.

---

### **Bar Chart**
```wzl
barchart(x, y, title="Bar Chart Example", xlabel="Categories", ylabel="Values");
```
- **x, y:** Vectors of data.
- **title:** (optional) Plot title.
- **xlabel:** (optional) X-axis label.
- **ylabel:** (optional) Y-axis label.

---

### **Pie Chart**
```wzl
values = [4.0, 2.5, 2, 10];
labels = ["Apples", "Bananas", "Cherries", "Dates"];
piechart(values, labels=labels);
```
- **values:** Vector of data.
- **labels:** (optional) Vector of string labels.

---

### **Scatter Plot**
```wzl
scatter(x, y, title="Scatter Example", xlabel="X", ylabel="Y");
```
- **x, y:** Vectors of data.
- **title:** (optional) Plot title.
- **xlabel:** (optional) X-axis label.
- **ylabel:** (optional) Y-axis label.

---

### **Box Plot**
```wzl
t_labels = ["hello", "World", "May"];
boxplot([x, y, z], title="Box Plot Example", xlabel="Groups", ylabel="Values", tick_labels=t_labels);
```
- **[x, y, z]:** List of vectors (multiple data series).
- **title:** (optional) Plot title.
- **xlabel:** (optional) X-axis label.
- **ylabel:** (optional) Y-axis label.
- **tick_labels:** (optional) Vector of string labels for each group.

---

**Note:**  
- All function calls end with a semicolon `;`.
- Keyword arguments are supported for all visualization functions as shown above.
- You can mix and match options as needed, following the examples.

---

Let me know if you want this in a different format (Markdown, PDF, etc.) or want to add more examples!
